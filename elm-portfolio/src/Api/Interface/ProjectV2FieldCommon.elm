-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Interface.ProjectV2FieldCommon exposing (..)

import Api.Enum.ProjectV2FieldType
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onProjectV2Field : SelectionSet decodesTo Api.Object.ProjectV2Field
    , onProjectV2IterationField : SelectionSet decodesTo Api.Object.ProjectV2IterationField
    , onProjectV2SingleSelectField : SelectionSet decodesTo Api.Object.ProjectV2SingleSelectField
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Api.Interface.ProjectV2FieldCommon
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "ProjectV2Field" selections____.onProjectV2Field
        , Object.buildFragment "ProjectV2IterationField" selections____.onProjectV2IterationField
        , Object.buildFragment "ProjectV2SingleSelectField" selections____.onProjectV2SingleSelectField
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onProjectV2Field = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onProjectV2IterationField = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onProjectV2SingleSelectField = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Interface.ProjectV2FieldCommon
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The field's type.
-}
dataType : SelectionSet Api.Enum.ProjectV2FieldType.ProjectV2FieldType Api.Interface.ProjectV2FieldCommon
dataType =
    Object.selectionForField "Enum.ProjectV2FieldType.ProjectV2FieldType" "dataType" [] Api.Enum.ProjectV2FieldType.decoder


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Api.Interface.ProjectV2FieldCommon
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


id : SelectionSet Api.ScalarCodecs.Id Api.Interface.ProjectV2FieldCommon
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The project field's name.
-}
name : SelectionSet String Api.Interface.ProjectV2FieldCommon
name =
    Object.selectionForField "String" "name" [] Decode.string


{-| The project that contains this field.
-}
project :
    SelectionSet decodesTo Api.Object.ProjectV2
    -> SelectionSet decodesTo Api.Interface.ProjectV2FieldCommon
project object____ =
    Object.selectionForCompositeField "project" [] object____ Basics.identity


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Interface.ProjectV2FieldCommon
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)
