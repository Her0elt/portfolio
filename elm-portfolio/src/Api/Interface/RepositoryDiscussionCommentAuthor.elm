-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Interface.RepositoryDiscussionCommentAuthor exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onOrganization : SelectionSet decodesTo Api.Object.Organization
    , onUser : SelectionSet decodesTo Api.Object.User
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Api.Interface.RepositoryDiscussionCommentAuthor
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Organization" selections____.onOrganization
        , Object.buildFragment "User" selections____.onUser
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onOrganization = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onUser = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


type alias RepositoryDiscussionCommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , repositoryId : OptionalArgument Api.ScalarCodecs.Id
    , onlyAnswers : OptionalArgument Bool
    }


{-| Discussion comments this user has authored.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - repositoryId - Filter discussion comments to only those in a specific repository.
  - onlyAnswers - Filter discussion comments to only those that were marked as the answer

-}
repositoryDiscussionComments :
    (RepositoryDiscussionCommentsOptionalArguments -> RepositoryDiscussionCommentsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.DiscussionCommentConnection
    -> SelectionSet decodesTo Api.Interface.RepositoryDiscussionCommentAuthor
repositoryDiscussionComments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, repositoryId = Absent, onlyAnswers = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "repositoryId" filledInOptionals____.repositoryId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "onlyAnswers" filledInOptionals____.onlyAnswers Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "repositoryDiscussionComments" optionalArgs____ object____ Basics.identity
