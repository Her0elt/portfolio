-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Issue exposing (..)

import Api.Enum.CommentAuthorAssociation
import Api.Enum.CommentCannotUpdateReason
import Api.Enum.IssueState
import Api.Enum.IssueStateReason
import Api.Enum.IssueTimelineItemsItemType
import Api.Enum.LockReason
import Api.Enum.ProjectCardArchivedState
import Api.Enum.ProjectNextOrderField
import Api.Enum.ReactionContent
import Api.Enum.SubscriptionState
import Api.Enum.TrackedIssueStates
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Reason that the conversation was locked.
-}
activeLockReason : SelectionSet (Maybe Api.Enum.LockReason.LockReason) Api.Object.Issue
activeLockReason =
    Object.selectionForField "(Maybe Enum.LockReason.LockReason)" "activeLockReason" [] (Api.Enum.LockReason.decoder |> Decode.nullable)


type alias AssigneesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of Users assigned to this object.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
assignees :
    (AssigneesOptionalArguments -> AssigneesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.UserConnection
    -> SelectionSet decodesTo Api.Object.Issue
assignees fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "assignees" optionalArgs____ object____ Basics.identity


{-| The actor who authored the comment.
-}
author :
    SelectionSet decodesTo Api.Interface.Actor
    -> SelectionSet (Maybe decodesTo) Api.Object.Issue
author object____ =
    Object.selectionForCompositeField "author" [] object____ (Basics.identity >> Decode.nullable)


{-| Author's association with the subject of the comment.
-}
authorAssociation : SelectionSet Api.Enum.CommentAuthorAssociation.CommentAuthorAssociation Api.Object.Issue
authorAssociation =
    Object.selectionForField "Enum.CommentAuthorAssociation.CommentAuthorAssociation" "authorAssociation" [] Api.Enum.CommentAuthorAssociation.decoder


{-| Identifies the body of the issue.
-}
body : SelectionSet String Api.Object.Issue
body =
    Object.selectionForField "String" "body" [] Decode.string


{-| The body rendered to HTML.
-}
bodyHTML : SelectionSet Api.ScalarCodecs.Html Api.Object.Issue
bodyHTML =
    Object.selectionForField "ScalarCodecs.Html" "bodyHTML" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| The http path for this issue body
-}
bodyResourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Issue
bodyResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "bodyResourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Identifies the body of the issue rendered to text.
-}
bodyText : SelectionSet String Api.Object.Issue
bodyText =
    Object.selectionForField "String" "bodyText" [] Decode.string


{-| The http URL for this issue body
-}
bodyUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Issue
bodyUrl =
    Object.selectionForField "ScalarCodecs.Uri" "bodyUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| `true` if the object is closed (definition of closed may depend on type)
-}
closed : SelectionSet Bool Api.Object.Issue
closed =
    Object.selectionForField "Bool" "closed" [] Decode.bool


{-| Identifies the date and time when the object was closed.
-}
closedAt : SelectionSet (Maybe Api.ScalarCodecs.DateTime) Api.Object.Issue
closedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "closedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


type alias CommentsOptionalArguments =
    { orderBy : OptionalArgument Api.InputObject.IssueCommentOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of comments associated with the Issue.

  - orderBy - Ordering options for issue comments returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
comments :
    (CommentsOptionalArguments -> CommentsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.IssueCommentConnection
    -> SelectionSet decodesTo Api.Object.Issue
comments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeIssueCommentOrder, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "comments" optionalArgs____ object____ Basics.identity


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Issue
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Check if this comment was created via an email reply.
-}
createdViaEmail : SelectionSet Bool Api.Object.Issue
createdViaEmail =
    Object.selectionForField "Bool" "createdViaEmail" [] Decode.bool


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Api.Object.Issue
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The actor who edited the comment.
-}
editor :
    SelectionSet decodesTo Api.Interface.Actor
    -> SelectionSet (Maybe decodesTo) Api.Object.Issue
editor object____ =
    Object.selectionForCompositeField "editor" [] object____ (Basics.identity >> Decode.nullable)


type alias HovercardOptionalArguments =
    { includeNotificationContexts : OptionalArgument Bool }


{-| The hovercard information for this issue

  - includeNotificationContexts - Whether or not to include notification contexts

-}
hovercard :
    (HovercardOptionalArguments -> HovercardOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Hovercard
    -> SelectionSet decodesTo Api.Object.Issue
hovercard fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { includeNotificationContexts = Absent }

        optionalArgs____ =
            [ Argument.optional "includeNotificationContexts" filledInOptionals____.includeNotificationContexts Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "hovercard" optionalArgs____ object____ Basics.identity


id : SelectionSet Api.ScalarCodecs.Id Api.Object.Issue
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Check if this comment was edited and includes an edit with the creation data
-}
includesCreatedEdit : SelectionSet Bool Api.Object.Issue
includesCreatedEdit =
    Object.selectionForField "Bool" "includesCreatedEdit" [] Decode.bool


{-| Indicates whether or not this issue is currently pinned to the repository issues list
-}
isPinned : SelectionSet (Maybe Bool) Api.Object.Issue
isPinned =
    Object.selectionForField "(Maybe Bool)" "isPinned" [] (Decode.bool |> Decode.nullable)


{-| Is this issue read by the viewer
-}
isReadByViewer : SelectionSet (Maybe Bool) Api.Object.Issue
isReadByViewer =
    Object.selectionForField "(Maybe Bool)" "isReadByViewer" [] (Decode.bool |> Decode.nullable)


type alias LabelsOptionalArguments =
    { orderBy : OptionalArgument Api.InputObject.LabelOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of labels associated with the object.

  - orderBy - Ordering options for labels returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
labels :
    (LabelsOptionalArguments -> LabelsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.LabelConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Issue
labels fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeLabelOrder, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "labels" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| The moment the editor made the last edit
-}
lastEditedAt : SelectionSet (Maybe Api.ScalarCodecs.DateTime) Api.Object.Issue
lastEditedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "lastEditedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


type alias LinkedBranchesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Branches linked to this issue.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
linkedBranches :
    (LinkedBranchesOptionalArguments -> LinkedBranchesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.LinkedBranchConnection
    -> SelectionSet decodesTo Api.Object.Issue
linkedBranches fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "linkedBranches" optionalArgs____ object____ Basics.identity


{-| `true` if the object is locked
-}
locked : SelectionSet Bool Api.Object.Issue
locked =
    Object.selectionForField "Bool" "locked" [] Decode.bool


{-| Identifies the milestone associated with the issue.
-}
milestone :
    SelectionSet decodesTo Api.Object.Milestone
    -> SelectionSet (Maybe decodesTo) Api.Object.Issue
milestone object____ =
    Object.selectionForCompositeField "milestone" [] object____ (Basics.identity >> Decode.nullable)


{-| Identifies the issue number.
-}
number : SelectionSet Int Api.Object.Issue
number =
    Object.selectionForField "Int" "number" [] Decode.int


type alias ParticipantsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of Users that are participating in the Issue conversation.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
participants :
    (ParticipantsOptionalArguments -> ParticipantsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.UserConnection
    -> SelectionSet decodesTo Api.Object.Issue
participants fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "participants" optionalArgs____ object____ Basics.identity


type alias ProjectCardsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , archivedStates : OptionalArgument (List (Maybe Api.Enum.ProjectCardArchivedState.ProjectCardArchivedState))
    }


{-| List of project cards associated with this issue.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - archivedStates - A list of archived states to filter the cards by

-}
projectCards :
    (ProjectCardsOptionalArguments -> ProjectCardsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectCardConnection
    -> SelectionSet decodesTo Api.Object.Issue
projectCards fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, archivedStates = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "archivedStates" filledInOptionals____.archivedStates (Encode.enum Api.Enum.ProjectCardArchivedState.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectCards" optionalArgs____ object____ Basics.identity


type alias ProjectItemsOptionalArguments =
    { includeArchived : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| List of project items associated with this issue.

  - includeArchived - Include archived items.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projectItems :
    (ProjectItemsOptionalArguments -> ProjectItemsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectV2ItemConnection
    -> SelectionSet decodesTo Api.Object.Issue
projectItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { includeArchived = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "includeArchived" filledInOptionals____.includeArchived Encode.bool, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectItems" optionalArgs____ object____ Basics.identity


type alias ProjectNextRequiredArguments =
    { number : Int }


{-| Find a project by project (beta) number.
@deprecated The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. Follow the ProjectV2 guide at <https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/>, to find a suitable replacement. Removal on 2023-01-01 UTC.

  - number - The project (beta) number.

-}
projectNext :
    ProjectNextRequiredArguments
    -> SelectionSet decodesTo Api.Object.ProjectNext
    -> SelectionSet (Maybe decodesTo) Api.Object.Issue
projectNext requiredArgs____ object____ =
    Object.selectionForCompositeField "projectNext" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectNextItemsOptionalArguments =
    { includeArchived : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| List of project (beta) items associated with this issue.

  - includeArchived - Include archived items.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projectNextItems :
    (ProjectNextItemsOptionalArguments -> ProjectNextItemsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectNextItemConnection
    -> SelectionSet decodesTo Api.Object.Issue
projectNextItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { includeArchived = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "includeArchived" filledInOptionals____.includeArchived Encode.bool, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectNextItems" optionalArgs____ object____ Basics.identity


type alias ProjectV2RequiredArguments =
    { number : Int }


{-| Find a project by number.

  - number - The project number.

-}
projectV2 :
    ProjectV2RequiredArguments
    -> SelectionSet decodesTo Api.Object.ProjectV2
    -> SelectionSet (Maybe decodesTo) Api.Object.Issue
projectV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "projectV2" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectsNextOptionalArguments =
    { query : OptionalArgument String
    , sortBy : OptionalArgument Api.Enum.ProjectNextOrderField.ProjectNextOrderField
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of projects (beta) under the owner.
@deprecated The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. Follow the ProjectV2 guide at <https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/>, to find a suitable replacement. Removal on 2023-01-01 UTC.

  - query - A project (beta) to search for under the the owner.
  - sortBy - How to order the returned projects (beta).
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projectsNext :
    (ProjectsNextOptionalArguments -> ProjectsNextOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectNextConnection
    -> SelectionSet decodesTo Api.Object.Issue
projectsNext fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { query = Absent, sortBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "sortBy" filledInOptionals____.sortBy (Encode.enum Api.Enum.ProjectNextOrderField.toString), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectsNext" optionalArgs____ object____ Basics.identity


type alias ProjectsV2OptionalArguments =
    { query : OptionalArgument String
    , orderBy : OptionalArgument Api.InputObject.ProjectV2Order
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of projects under the owner.

  - query - A project to search for under the the owner.
  - orderBy - How to order the returned projects.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projectsV2 :
    (ProjectsV2OptionalArguments -> ProjectsV2OptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectV2Connection
    -> SelectionSet decodesTo Api.Object.Issue
projectsV2 fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { query = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeProjectV2Order, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectsV2" optionalArgs____ object____ Basics.identity


{-| Identifies when the comment was published at.
-}
publishedAt : SelectionSet (Maybe Api.ScalarCodecs.DateTime) Api.Object.Issue
publishedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "publishedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| A list of reactions grouped by content left on the subject.
-}
reactionGroups :
    SelectionSet decodesTo Api.Object.ReactionGroup
    -> SelectionSet (Maybe (List decodesTo)) Api.Object.Issue
reactionGroups object____ =
    Object.selectionForCompositeField "reactionGroups" [] object____ (Basics.identity >> Decode.list >> Decode.nullable)


type alias ReactionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , content : OptionalArgument Api.Enum.ReactionContent.ReactionContent
    , orderBy : OptionalArgument Api.InputObject.ReactionOrder
    }


{-| A list of Reactions left on the Issue.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - content - Allows filtering Reactions by emoji.
  - orderBy - Allows specifying the order in which reactions are returned.

-}
reactions :
    (ReactionsOptionalArguments -> ReactionsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ReactionConnection
    -> SelectionSet decodesTo Api.Object.Issue
reactions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, content = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "content" filledInOptionals____.content (Encode.enum Api.Enum.ReactionContent.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeReactionOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "reactions" optionalArgs____ object____ Basics.identity


{-| The repository associated with this node.
-}
repository :
    SelectionSet decodesTo Api.Object.Repository
    -> SelectionSet decodesTo Api.Object.Issue
repository object____ =
    Object.selectionForCompositeField "repository" [] object____ Basics.identity


{-| The HTTP path for this issue
-}
resourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Issue
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Identifies the state of the issue.
-}
state : SelectionSet Api.Enum.IssueState.IssueState Api.Object.Issue
state =
    Object.selectionForField "Enum.IssueState.IssueState" "state" [] Api.Enum.IssueState.decoder


{-| Identifies the reason for the issue state.
-}
stateReason : SelectionSet (Maybe Api.Enum.IssueStateReason.IssueStateReason) Api.Object.Issue
stateReason =
    Object.selectionForField "(Maybe Enum.IssueStateReason.IssueStateReason)" "stateReason" [] (Api.Enum.IssueStateReason.decoder |> Decode.nullable)


type alias TimelineOptionalArguments =
    { since : OptionalArgument Api.ScalarCodecs.DateTime
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of events, comments, commits, etc. associated with the issue.
@deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.

  - since - Allows filtering timeline events by a `since` timestamp.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
timeline :
    (TimelineOptionalArguments -> TimelineOptionalArguments)
    -> SelectionSet decodesTo Api.Object.IssueTimelineConnection
    -> SelectionSet decodesTo Api.Object.Issue
timeline fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { since = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "since" filledInOptionals____.since (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDateTime), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "timeline" optionalArgs____ object____ Basics.identity


type alias TimelineItemsOptionalArguments =
    { since : OptionalArgument Api.ScalarCodecs.DateTime
    , skip : OptionalArgument Int
    , itemTypes : OptionalArgument (List Api.Enum.IssueTimelineItemsItemType.IssueTimelineItemsItemType)
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of events, comments, commits, etc. associated with the issue.

  - since - Filter timeline items by a `since` timestamp.
  - skip - Skips the first _n_ elements in the list.
  - itemTypes - Filter timeline items by type.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
timelineItems :
    (TimelineItemsOptionalArguments -> TimelineItemsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.IssueTimelineItemsConnection
    -> SelectionSet decodesTo Api.Object.Issue
timelineItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { since = Absent, skip = Absent, itemTypes = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "since" filledInOptionals____.since (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDateTime), Argument.optional "skip" filledInOptionals____.skip Encode.int, Argument.optional "itemTypes" filledInOptionals____.itemTypes (Encode.enum Api.Enum.IssueTimelineItemsItemType.toString |> Encode.list), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "timelineItems" optionalArgs____ object____ Basics.identity


{-| Identifies the issue title.
-}
title : SelectionSet String Api.Object.Issue
title =
    Object.selectionForField "String" "title" [] Decode.string


{-| Identifies the issue title rendered to HTML.
-}
titleHTML : SelectionSet String Api.Object.Issue
titleHTML =
    Object.selectionForField "String" "titleHTML" [] Decode.string


type alias TrackedInIssuesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of issues that track this issue

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
trackedInIssues :
    (TrackedInIssuesOptionalArguments -> TrackedInIssuesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.IssueConnection
    -> SelectionSet decodesTo Api.Object.Issue
trackedInIssues fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "trackedInIssues" optionalArgs____ object____ Basics.identity


type alias TrackedIssuesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of issues tracked inside the current issue

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
trackedIssues :
    (TrackedIssuesOptionalArguments -> TrackedIssuesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.IssueConnection
    -> SelectionSet decodesTo Api.Object.Issue
trackedIssues fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "trackedIssues" optionalArgs____ object____ Basics.identity


type alias TrackedIssuesCountOptionalArguments =
    { states : OptionalArgument (List (Maybe Api.Enum.TrackedIssueStates.TrackedIssueStates)) }


{-| The number of tracked issues for this issue

  - states - Limit the count to tracked issues with the specified states.

-}
trackedIssuesCount :
    (TrackedIssuesCountOptionalArguments -> TrackedIssuesCountOptionalArguments)
    -> SelectionSet Int Api.Object.Issue
trackedIssuesCount fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { states = Absent }

        optionalArgs____ =
            [ Argument.optional "states" filledInOptionals____.states (Encode.enum Api.Enum.TrackedIssueStates.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "Int" "trackedIssuesCount" optionalArgs____ Decode.int


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Issue
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this issue
-}
url : SelectionSet Api.ScalarCodecs.Uri Api.Object.Issue
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias UserContentEditsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of edits to this content.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
userContentEdits :
    (UserContentEditsOptionalArguments -> UserContentEditsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.UserContentEditConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Issue
userContentEdits fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "userContentEdits" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| Can user react to this subject
-}
viewerCanReact : SelectionSet Bool Api.Object.Issue
viewerCanReact =
    Object.selectionForField "Bool" "viewerCanReact" [] Decode.bool


{-| Check if the viewer is able to change their subscription status for the repository.
-}
viewerCanSubscribe : SelectionSet Bool Api.Object.Issue
viewerCanSubscribe =
    Object.selectionForField "Bool" "viewerCanSubscribe" [] Decode.bool


{-| Check if the current viewer can update this object.
-}
viewerCanUpdate : SelectionSet Bool Api.Object.Issue
viewerCanUpdate =
    Object.selectionForField "Bool" "viewerCanUpdate" [] Decode.bool


{-| Reasons why the current viewer can not update this comment.
-}
viewerCannotUpdateReasons : SelectionSet (List Api.Enum.CommentCannotUpdateReason.CommentCannotUpdateReason) Api.Object.Issue
viewerCannotUpdateReasons =
    Object.selectionForField "(List Enum.CommentCannotUpdateReason.CommentCannotUpdateReason)" "viewerCannotUpdateReasons" [] (Api.Enum.CommentCannotUpdateReason.decoder |> Decode.list)


{-| Did the viewer author this comment.
-}
viewerDidAuthor : SelectionSet Bool Api.Object.Issue
viewerDidAuthor =
    Object.selectionForField "Bool" "viewerDidAuthor" [] Decode.bool


{-| Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-}
viewerSubscription : SelectionSet (Maybe Api.Enum.SubscriptionState.SubscriptionState) Api.Object.Issue
viewerSubscription =
    Object.selectionForField "(Maybe Enum.SubscriptionState.SubscriptionState)" "viewerSubscription" [] (Api.Enum.SubscriptionState.decoder |> Decode.nullable)
