-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Commit exposing (..)

import Api.Enum.SubscriptionState
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| An abbreviated version of the Git object ID
-}
abbreviatedOid : SelectionSet String Api.Object.Commit
abbreviatedOid =
    Object.selectionForField "String" "abbreviatedOid" [] Decode.string


{-| The number of additions in this commit.
-}
additions : SelectionSet Int Api.Object.Commit
additions =
    Object.selectionForField "Int" "additions" [] Decode.int


type alias AssociatedPullRequestsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.PullRequestOrder
    }


{-| The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for pull requests.

-}
associatedPullRequests :
    (AssociatedPullRequestsOptionalArguments -> AssociatedPullRequestsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.PullRequestConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Commit
associatedPullRequests fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodePullRequestOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "associatedPullRequests" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| Authorship details of the commit.
-}
author :
    SelectionSet decodesTo Api.Object.GitActor
    -> SelectionSet (Maybe decodesTo) Api.Object.Commit
author object____ =
    Object.selectionForCompositeField "author" [] object____ (Basics.identity >> Decode.nullable)


{-| Check if the committer and the author match.
-}
authoredByCommitter : SelectionSet Bool Api.Object.Commit
authoredByCommitter =
    Object.selectionForField "Bool" "authoredByCommitter" [] Decode.bool


{-| The datetime when this commit was authored.
-}
authoredDate : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Commit
authoredDate =
    Object.selectionForField "ScalarCodecs.DateTime" "authoredDate" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias AuthorsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| The list of authors for this commit based on the git author and the Co-authored-by
message trailer. The git author will always be first.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
authors :
    (AuthorsOptionalArguments -> AuthorsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.GitActorConnection
    -> SelectionSet decodesTo Api.Object.Commit
authors fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "authors" optionalArgs____ object____ Basics.identity


type alias BlameRequiredArguments =
    { path : String }


{-| Fetches `git blame` information.

  - path - The file whose Git blame information you want.

-}
blame :
    BlameRequiredArguments
    -> SelectionSet decodesTo Api.Object.Blame
    -> SelectionSet decodesTo Api.Object.Commit
blame requiredArgs____ object____ =
    Object.selectionForCompositeField "blame" [ Argument.required "path" requiredArgs____.path Encode.string ] object____ Basics.identity


{-| We recommend using the `changedFielsIfAvailable` field instead of `changedFiles`, as `changedFiles` will cause your request to return an error if GitHub is unable to calculate the number of changed files.
@deprecated `changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC.
-}
changedFiles : SelectionSet Int Api.Object.Commit
changedFiles =
    Object.selectionForField "Int" "changedFiles" [] Decode.int


{-| The number of changed files in this commit. If GitHub is unable to calculate the number of changed files (for example due to a timeout), this will return `null`. We recommend using this field instead of `changedFiles`.
-}
changedFilesIfAvailable : SelectionSet (Maybe Int) Api.Object.Commit
changedFilesIfAvailable =
    Object.selectionForField "(Maybe Int)" "changedFilesIfAvailable" [] (Decode.int |> Decode.nullable)


type alias CheckSuitesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , filterBy : OptionalArgument Api.InputObject.CheckSuiteFilter
    }


{-| The check suites associated with a commit.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - filterBy - Filters the check suites by this type.

-}
checkSuites :
    (CheckSuitesOptionalArguments -> CheckSuitesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.CheckSuiteConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Commit
checkSuites fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, filterBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "filterBy" filledInOptionals____.filterBy Api.InputObject.encodeCheckSuiteFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "checkSuites" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias CommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Comments made on the commit.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
comments :
    (CommentsOptionalArguments -> CommentsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.CommitCommentConnection
    -> SelectionSet decodesTo Api.Object.Commit
comments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "comments" optionalArgs____ object____ Basics.identity


{-| The HTTP path for this Git object
-}
commitResourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Commit
commitResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "commitResourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for this Git object
-}
commitUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Commit
commitUrl =
    Object.selectionForField "ScalarCodecs.Uri" "commitUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The datetime when this commit was committed.
-}
committedDate : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Commit
committedDate =
    Object.selectionForField "ScalarCodecs.DateTime" "committedDate" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Check if committed via GitHub web UI.
-}
committedViaWeb : SelectionSet Bool Api.Object.Commit
committedViaWeb =
    Object.selectionForField "Bool" "committedViaWeb" [] Decode.bool


{-| Committer details of the commit.
-}
committer :
    SelectionSet decodesTo Api.Object.GitActor
    -> SelectionSet (Maybe decodesTo) Api.Object.Commit
committer object____ =
    Object.selectionForCompositeField "committer" [] object____ (Basics.identity >> Decode.nullable)


{-| The number of deletions in this commit.
-}
deletions : SelectionSet Int Api.Object.Commit
deletions =
    Object.selectionForField "Int" "deletions" [] Decode.int


type alias DeploymentsOptionalArguments =
    { environments : OptionalArgument (List String)
    , orderBy : OptionalArgument Api.InputObject.DeploymentOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| The deployments associated with a commit.

  - environments - Environments to list deployments for
  - orderBy - Ordering options for deployments returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
deployments :
    (DeploymentsOptionalArguments -> DeploymentsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.DeploymentConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Commit
deployments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { environments = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "environments" filledInOptionals____.environments (Encode.string |> Encode.list), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeDeploymentOrder, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "deployments" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias FileRequiredArguments =
    { path : String }


{-| The tree entry representing the file located at the given path.

  - path - The path for the file

-}
file :
    FileRequiredArguments
    -> SelectionSet decodesTo Api.Object.TreeEntry
    -> SelectionSet (Maybe decodesTo) Api.Object.Commit
file requiredArgs____ object____ =
    Object.selectionForCompositeField "file" [ Argument.required "path" requiredArgs____.path Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias HistoryOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , path : OptionalArgument String
    , author : OptionalArgument Api.InputObject.CommitAuthor
    , since : OptionalArgument Api.ScalarCodecs.GitTimestamp
    , until : OptionalArgument Api.ScalarCodecs.GitTimestamp
    }


{-| The linear commit history starting from (and including) this commit, in the same order as `git log`.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - path - If non-null, filters history to only show commits touching files under this path.
  - author - If non-null, filters history to only show commits with matching authorship.
  - since - Allows specifying a beginning time or date for fetching commits.
  - until - Allows specifying an ending time or date for fetching commits.

-}
history :
    (HistoryOptionalArguments -> HistoryOptionalArguments)
    -> SelectionSet decodesTo Api.Object.CommitHistoryConnection
    -> SelectionSet decodesTo Api.Object.Commit
history fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, path = Absent, author = Absent, since = Absent, until = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "path" filledInOptionals____.path Encode.string, Argument.optional "author" filledInOptionals____.author Api.InputObject.encodeCommitAuthor, Argument.optional "since" filledInOptionals____.since (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecGitTimestamp), Argument.optional "until" filledInOptionals____.until (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecGitTimestamp) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "history" optionalArgs____ object____ Basics.identity


id : SelectionSet Api.ScalarCodecs.Id Api.Object.Commit
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The Git commit message
-}
message : SelectionSet String Api.Object.Commit
message =
    Object.selectionForField "String" "message" [] Decode.string


{-| The Git commit message body
-}
messageBody : SelectionSet String Api.Object.Commit
messageBody =
    Object.selectionForField "String" "messageBody" [] Decode.string


{-| The commit message body rendered to HTML.
-}
messageBodyHTML : SelectionSet Api.ScalarCodecs.Html Api.Object.Commit
messageBodyHTML =
    Object.selectionForField "ScalarCodecs.Html" "messageBodyHTML" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| The Git commit message headline
-}
messageHeadline : SelectionSet String Api.Object.Commit
messageHeadline =
    Object.selectionForField "String" "messageHeadline" [] Decode.string


{-| The commit message headline rendered to HTML.
-}
messageHeadlineHTML : SelectionSet Api.ScalarCodecs.Html Api.Object.Commit
messageHeadlineHTML =
    Object.selectionForField "ScalarCodecs.Html" "messageHeadlineHTML" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| The Git object ID
-}
oid : SelectionSet Api.ScalarCodecs.GitObjectID Api.Object.Commit
oid =
    Object.selectionForField "ScalarCodecs.GitObjectID" "oid" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecGitObjectID |> .decoder)


{-| The organization this commit was made on behalf of.
-}
onBehalfOf :
    SelectionSet decodesTo Api.Object.Organization
    -> SelectionSet (Maybe decodesTo) Api.Object.Commit
onBehalfOf object____ =
    Object.selectionForCompositeField "onBehalfOf" [] object____ (Basics.identity >> Decode.nullable)


type alias ParentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| The parents of a commit.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
parents :
    (ParentsOptionalArguments -> ParentsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.CommitConnection
    -> SelectionSet decodesTo Api.Object.Commit
parents fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "parents" optionalArgs____ object____ Basics.identity


{-| The datetime when this commit was pushed.
-}
pushedDate : SelectionSet (Maybe Api.ScalarCodecs.DateTime) Api.Object.Commit
pushedDate =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "pushedDate" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| The Repository this commit belongs to
-}
repository :
    SelectionSet decodesTo Api.Object.Repository
    -> SelectionSet decodesTo Api.Object.Commit
repository object____ =
    Object.selectionForCompositeField "repository" [] object____ Basics.identity


{-| The HTTP path for this commit
-}
resourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Commit
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Commit signing information, if present.
-}
signature :
    SelectionSet decodesTo Api.Interface.GitSignature
    -> SelectionSet (Maybe decodesTo) Api.Object.Commit
signature object____ =
    Object.selectionForCompositeField "signature" [] object____ (Basics.identity >> Decode.nullable)


{-| Status information for this commit
-}
status :
    SelectionSet decodesTo Api.Object.Status
    -> SelectionSet (Maybe decodesTo) Api.Object.Commit
status object____ =
    Object.selectionForCompositeField "status" [] object____ (Basics.identity >> Decode.nullable)


{-| Check and Status rollup information for this commit.
-}
statusCheckRollup :
    SelectionSet decodesTo Api.Object.StatusCheckRollup
    -> SelectionSet (Maybe decodesTo) Api.Object.Commit
statusCheckRollup object____ =
    Object.selectionForCompositeField "statusCheckRollup" [] object____ (Basics.identity >> Decode.nullable)


type alias SubmodulesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
submodules :
    (SubmodulesOptionalArguments -> SubmodulesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.SubmoduleConnection
    -> SelectionSet decodesTo Api.Object.Commit
submodules fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "submodules" optionalArgs____ object____ Basics.identity


{-| Returns a URL to download a tarball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes.
-}
tarballUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Commit
tarballUrl =
    Object.selectionForField "ScalarCodecs.Uri" "tarballUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Commit's root Tree
-}
tree :
    SelectionSet decodesTo Api.Object.Tree
    -> SelectionSet decodesTo Api.Object.Commit
tree object____ =
    Object.selectionForCompositeField "tree" [] object____ Basics.identity


{-| The HTTP path for the tree of this commit
-}
treeResourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Commit
treeResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "treeResourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for the tree of this commit
-}
treeUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Commit
treeUrl =
    Object.selectionForField "ScalarCodecs.Uri" "treeUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for this commit
-}
url : SelectionSet Api.ScalarCodecs.Uri Api.Object.Commit
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Check if the viewer is able to change their subscription status for the repository.
-}
viewerCanSubscribe : SelectionSet Bool Api.Object.Commit
viewerCanSubscribe =
    Object.selectionForField "Bool" "viewerCanSubscribe" [] Decode.bool


{-| Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-}
viewerSubscription : SelectionSet (Maybe Api.Enum.SubscriptionState.SubscriptionState) Api.Object.Commit
viewerSubscription =
    Object.selectionForField "(Maybe Enum.SubscriptionState.SubscriptionState)" "viewerSubscription" [] (Api.Enum.SubscriptionState.decoder |> Decode.nullable)


{-| Returns a URL to download a zipball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes.
-}
zipballUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Commit
zipballUrl =
    Object.selectionForField "ScalarCodecs.Uri" "zipballUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)
