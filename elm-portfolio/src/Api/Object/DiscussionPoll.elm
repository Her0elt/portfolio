-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.DiscussionPoll exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The discussion that this poll belongs to.
-}
discussion :
    SelectionSet decodesTo Api.Object.Discussion
    -> SelectionSet (Maybe decodesTo) Api.Object.DiscussionPoll
discussion object____ =
    Object.selectionForCompositeField "discussion" [] object____ (Basics.identity >> Decode.nullable)


id : SelectionSet Api.ScalarCodecs.Id Api.Object.DiscussionPoll
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias OptionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.DiscussionPollOptionOrder
    }


{-| The options for this poll.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - How to order the options for the discussion poll.

-}
options :
    (OptionsOptionalArguments -> OptionsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.DiscussionPollOptionConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.DiscussionPoll
options fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeDiscussionPollOptionOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "options" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| The question that is being asked by this poll.
-}
question : SelectionSet String Api.Object.DiscussionPoll
question =
    Object.selectionForField "String" "question" [] Decode.string


{-| The total number of votes that have been cast for this poll.
-}
totalVoteCount : SelectionSet Int Api.Object.DiscussionPoll
totalVoteCount =
    Object.selectionForField "Int" "totalVoteCount" [] Decode.int


{-| Indicates if the viewer has permission to vote in this poll.
-}
viewerCanVote : SelectionSet Bool Api.Object.DiscussionPoll
viewerCanVote =
    Object.selectionForField "Bool" "viewerCanVote" [] Decode.bool


{-| Indicates if the viewer has voted for any option in this poll.
-}
viewerHasVoted : SelectionSet Bool Api.Object.DiscussionPoll
viewerHasVoted =
    Object.selectionForField "Bool" "viewerHasVoted" [] Decode.bool
