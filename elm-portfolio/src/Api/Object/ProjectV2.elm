-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.ProjectV2 exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Returns true if the project is closed.
-}
closed : SelectionSet Bool Api.Object.ProjectV2
closed =
    Object.selectionForField "Bool" "closed" [] Decode.bool


{-| Identifies the date and time when the object was closed.
-}
closedAt : SelectionSet (Maybe Api.ScalarCodecs.DateTime) Api.Object.ProjectV2
closedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "closedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.ProjectV2
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The actor who originally created the project.
-}
creator :
    SelectionSet decodesTo Api.Interface.Actor
    -> SelectionSet (Maybe decodesTo) Api.Object.ProjectV2
creator object____ =
    Object.selectionForCompositeField "creator" [] object____ (Basics.identity >> Decode.nullable)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Api.Object.ProjectV2
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


type alias FieldRequiredArguments =
    { name : String }


{-| A field of the project

  - name - The name of the field

-}
field :
    FieldRequiredArguments
    -> SelectionSet decodesTo Api.Union.ProjectV2FieldConfiguration
    -> SelectionSet (Maybe decodesTo) Api.Object.ProjectV2
field requiredArgs____ object____ =
    Object.selectionForCompositeField "field" [ Argument.required "name" requiredArgs____.name Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias FieldsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.ProjectV2FieldOrder
    }


{-| List of fields and their constraints in the project

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for project v2 fields returned from the connection

-}
fields :
    (FieldsOptionalArguments -> FieldsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectV2FieldConfigurationConnection
    -> SelectionSet decodesTo Api.Object.ProjectV2
fields fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeProjectV2FieldOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "fields" optionalArgs____ object____ Basics.identity


id : SelectionSet Api.ScalarCodecs.Id Api.Object.ProjectV2
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias ItemsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.ProjectV2ItemOrder
    }


{-| List of items in the project

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for project v2 items returned from the connection

-}
items :
    (ItemsOptionalArguments -> ItemsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectV2ItemConnection
    -> SelectionSet decodesTo Api.Object.ProjectV2
items fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeProjectV2ItemOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "items" optionalArgs____ object____ Basics.identity


{-| The project's number.
-}
number : SelectionSet Int Api.Object.ProjectV2
number =
    Object.selectionForField "Int" "number" [] Decode.int


{-| The project's owner. Currently limited to organizations and users.
-}
owner :
    SelectionSet decodesTo Api.Interface.ProjectV2Owner
    -> SelectionSet decodesTo Api.Object.ProjectV2
owner object____ =
    Object.selectionForCompositeField "owner" [] object____ Basics.identity


{-| Returns true if the project is public.
-}
public : SelectionSet Bool Api.Object.ProjectV2
public =
    Object.selectionForField "Bool" "public" [] Decode.bool


{-| The project's readme.
-}
readme : SelectionSet (Maybe String) Api.Object.ProjectV2
readme =
    Object.selectionForField "(Maybe String)" "readme" [] (Decode.string |> Decode.nullable)


type alias RepositoriesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.RepositoryOrder
    }


{-| The repositories the project is linked to.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for repositories returned from the connection

-}
repositories :
    (RepositoriesOptionalArguments -> RepositoriesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.RepositoryConnection
    -> SelectionSet decodesTo Api.Object.ProjectV2
repositories fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeRepositoryOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "repositories" optionalArgs____ object____ Basics.identity


{-| The HTTP path for this project
-}
resourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.ProjectV2
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The project's short description.
-}
shortDescription : SelectionSet (Maybe String) Api.Object.ProjectV2
shortDescription =
    Object.selectionForField "(Maybe String)" "shortDescription" [] (Decode.string |> Decode.nullable)


{-| The project's name.
-}
title : SelectionSet String Api.Object.ProjectV2
title =
    Object.selectionForField "String" "title" [] Decode.string


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.ProjectV2
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this project
-}
url : SelectionSet Api.ScalarCodecs.Uri Api.Object.ProjectV2
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias ViewRequiredArguments =
    { number : Int }


{-| A view of the project

  - number - The number of a view belonging to the project

-}
view :
    ViewRequiredArguments
    -> SelectionSet decodesTo Api.Object.ProjectV2View
    -> SelectionSet (Maybe decodesTo) Api.Object.ProjectV2
view requiredArgs____ object____ =
    Object.selectionForCompositeField "view" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


{-| Check if the current viewer can update this object.
-}
viewerCanUpdate : SelectionSet Bool Api.Object.ProjectV2
viewerCanUpdate =
    Object.selectionForField "Bool" "viewerCanUpdate" [] Decode.bool


type alias ViewsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.ProjectV2ViewOrder
    }


{-| List of views in the project

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for project v2 views returned from the connection

-}
views :
    (ViewsOptionalArguments -> ViewsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectV2ViewConnection
    -> SelectionSet decodesTo Api.Object.ProjectV2
views fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeProjectV2ViewOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "views" optionalArgs____ object____ Basics.identity
