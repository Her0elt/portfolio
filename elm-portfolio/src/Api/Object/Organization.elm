-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Organization exposing (..)

import Api.Enum.IpAllowListEnabledSettingValue
import Api.Enum.IpAllowListForInstalledAppsEnabledSettingValue
import Api.Enum.MigrationState
import Api.Enum.NotificationRestrictionSettingValue
import Api.Enum.PackageType
import Api.Enum.PinnableItemType
import Api.Enum.ProjectNextOrderField
import Api.Enum.ProjectState
import Api.Enum.RepositoryAffiliation
import Api.Enum.RepositoryPrivacy
import Api.Enum.RoleInOrganization
import Api.Enum.SponsorsActivityAction
import Api.Enum.SponsorsActivityPeriod
import Api.Enum.TeamPrivacy
import Api.Enum.TeamRole
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias AnyPinnableItemsOptionalArguments =
    { type_ : OptionalArgument Api.Enum.PinnableItemType.PinnableItemType }


{-| Determine if this repository owner has any items that can be pinned to their profile.

  - type\_ - Filter to only a particular kind of pinnable item.

-}
anyPinnableItems :
    (AnyPinnableItemsOptionalArguments -> AnyPinnableItemsOptionalArguments)
    -> SelectionSet Bool Api.Object.Organization
anyPinnableItems fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { type_ = Absent }

        optionalArgs____ =
            [ Argument.optional "type" filledInOptionals____.type_ (Encode.enum Api.Enum.PinnableItemType.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "Bool" "anyPinnableItems" optionalArgs____ Decode.bool


type alias AuditLogOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , query : OptionalArgument String
    , orderBy : OptionalArgument Api.InputObject.AuditLogOrder
    }


{-| Audit log entries of the organization

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - query - The query string to filter audit entries
  - orderBy - Ordering options for the returned audit log entries.

-}
auditLog :
    (AuditLogOptionalArguments -> AuditLogOptionalArguments)
    -> SelectionSet decodesTo Api.Object.OrganizationAuditEntryConnection
    -> SelectionSet decodesTo Api.Object.Organization
auditLog fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, query = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeAuditLogOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "auditLog" optionalArgs____ object____ Basics.identity


type alias AvatarUrlOptionalArguments =
    { size : OptionalArgument Int }


{-| A URL pointing to the organization's public avatar.

  - size - The size of the resulting square image.

-}
avatarUrl :
    (AvatarUrlOptionalArguments -> AvatarUrlOptionalArguments)
    -> SelectionSet Api.ScalarCodecs.Uri Api.Object.Organization
avatarUrl fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { size = Absent }

        optionalArgs____ =
            [ Argument.optional "size" filledInOptionals____.size Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "ScalarCodecs.Uri" "avatarUrl" optionalArgs____ (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Organization
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Api.Object.Organization
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The organization's public profile description.
-}
description : SelectionSet (Maybe String) Api.Object.Organization
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| The organization's public profile description rendered to HTML.
-}
descriptionHTML : SelectionSet (Maybe String) Api.Object.Organization
descriptionHTML =
    Object.selectionForField "(Maybe String)" "descriptionHTML" [] (Decode.string |> Decode.nullable)


type alias DomainsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , isVerified : OptionalArgument Bool
    , isApproved : OptionalArgument Bool
    , orderBy : OptionalArgument Api.InputObject.VerifiableDomainOrder
    }


{-| A list of domains owned by the organization.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - isVerified - Filter by if the domain is verified.
  - isApproved - Filter by if the domain is approved.
  - orderBy - Ordering options for verifiable domains returned.

-}
domains :
    (DomainsOptionalArguments -> DomainsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.VerifiableDomainConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
domains fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, isVerified = Absent, isApproved = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "isVerified" filledInOptionals____.isVerified Encode.bool, Argument.optional "isApproved" filledInOptionals____.isApproved Encode.bool, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeVerifiableDomainOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "domains" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| The organization's public email.
-}
email : SelectionSet (Maybe String) Api.Object.Organization
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


type alias EnterpriseOwnersOptionalArguments =
    { query : OptionalArgument String
    , organizationRole : OptionalArgument Api.Enum.RoleInOrganization.RoleInOrganization
    , orderBy : OptionalArgument Api.InputObject.OrgEnterpriseOwnerOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of owners of the organization's enterprise account.

  - query - The search string to look for.
  - organizationRole - The organization role to filter by.
  - orderBy - Ordering options for enterprise owners returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
enterpriseOwners :
    (EnterpriseOwnersOptionalArguments -> EnterpriseOwnersOptionalArguments)
    -> SelectionSet decodesTo Api.Object.OrganizationEnterpriseOwnerConnection
    -> SelectionSet decodesTo Api.Object.Organization
enterpriseOwners fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { query = Absent, organizationRole = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "organizationRole" filledInOptionals____.organizationRole (Encode.enum Api.Enum.RoleInOrganization.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeOrgEnterpriseOwnerOrder, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "enterpriseOwners" optionalArgs____ object____ Basics.identity


{-| The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
-}
estimatedNextSponsorsPayoutInCents : SelectionSet Int Api.Object.Organization
estimatedNextSponsorsPayoutInCents =
    Object.selectionForField "Int" "estimatedNextSponsorsPayoutInCents" [] Decode.int


{-| True if this user/organization has a GitHub Sponsors listing.
-}
hasSponsorsListing : SelectionSet Bool Api.Object.Organization
hasSponsorsListing =
    Object.selectionForField "Bool" "hasSponsorsListing" [] Decode.bool


id : SelectionSet Api.ScalarCodecs.Id Api.Object.Organization
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The interaction ability settings for this organization.
-}
interactionAbility :
    SelectionSet decodesTo Api.Object.RepositoryInteractionAbility
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
interactionAbility object____ =
    Object.selectionForCompositeField "interactionAbility" [] object____ (Basics.identity >> Decode.nullable)


{-| The setting value for whether the organization has an IP allow list enabled.
-}
ipAllowListEnabledSetting : SelectionSet Api.Enum.IpAllowListEnabledSettingValue.IpAllowListEnabledSettingValue Api.Object.Organization
ipAllowListEnabledSetting =
    Object.selectionForField "Enum.IpAllowListEnabledSettingValue.IpAllowListEnabledSettingValue" "ipAllowListEnabledSetting" [] Api.Enum.IpAllowListEnabledSettingValue.decoder


type alias IpAllowListEntriesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.IpAllowListEntryOrder
    }


{-| The IP addresses that are allowed to access resources owned by the organization.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for IP allow list entries returned.

-}
ipAllowListEntries :
    (IpAllowListEntriesOptionalArguments -> IpAllowListEntriesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.IpAllowListEntryConnection
    -> SelectionSet decodesTo Api.Object.Organization
ipAllowListEntries fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeIpAllowListEntryOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "ipAllowListEntries" optionalArgs____ object____ Basics.identity


{-| The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
-}
ipAllowListForInstalledAppsEnabledSetting : SelectionSet Api.Enum.IpAllowListForInstalledAppsEnabledSettingValue.IpAllowListForInstalledAppsEnabledSettingValue Api.Object.Organization
ipAllowListForInstalledAppsEnabledSetting =
    Object.selectionForField "Enum.IpAllowListForInstalledAppsEnabledSettingValue.IpAllowListForInstalledAppsEnabledSettingValue" "ipAllowListForInstalledAppsEnabledSetting" [] Api.Enum.IpAllowListForInstalledAppsEnabledSettingValue.decoder


type alias IsSponsoredByRequiredArguments =
    { accountLogin : String }


{-| Check if the given account is sponsoring this user/organization.

  - accountLogin - The target account's login.

-}
isSponsoredBy :
    IsSponsoredByRequiredArguments
    -> SelectionSet Bool Api.Object.Organization
isSponsoredBy requiredArgs____ =
    Object.selectionForField "Bool" "isSponsoredBy" [ Argument.required "accountLogin" requiredArgs____.accountLogin Encode.string ] Decode.bool


{-| True if the viewer is sponsored by this user/organization.
-}
isSponsoringViewer : SelectionSet Bool Api.Object.Organization
isSponsoringViewer =
    Object.selectionForField "Bool" "isSponsoringViewer" [] Decode.bool


{-| Whether the organization has verified its profile email and website.
-}
isVerified : SelectionSet Bool Api.Object.Organization
isVerified =
    Object.selectionForField "Bool" "isVerified" [] Decode.bool


{-| Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
-}
itemShowcase :
    SelectionSet decodesTo Api.Object.ProfileItemShowcase
    -> SelectionSet decodesTo Api.Object.Organization
itemShowcase object____ =
    Object.selectionForCompositeField "itemShowcase" [] object____ Basics.identity


{-| The organization's public profile location.
-}
location : SelectionSet (Maybe String) Api.Object.Organization
location =
    Object.selectionForField "(Maybe String)" "location" [] (Decode.string |> Decode.nullable)


{-| The organization's login name.
-}
login : SelectionSet String Api.Object.Organization
login =
    Object.selectionForField "String" "login" [] Decode.string


type alias MemberStatusesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.UserStatusOrder
    }


{-| Get the status messages members of this entity have set that are either public or visible only to the organization.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for user statuses returned from the connection.

-}
memberStatuses :
    (MemberStatusesOptionalArguments -> MemberStatusesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.UserStatusConnection
    -> SelectionSet decodesTo Api.Object.Organization
memberStatuses fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeUserStatusOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "memberStatuses" optionalArgs____ object____ Basics.identity


{-| Members can fork private repositories in this organization
-}
membersCanForkPrivateRepositories : SelectionSet Bool Api.Object.Organization
membersCanForkPrivateRepositories =
    Object.selectionForField "Bool" "membersCanForkPrivateRepositories" [] Decode.bool


type alias MembersWithRoleOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users who are members of this organization.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
membersWithRole :
    (MembersWithRoleOptionalArguments -> MembersWithRoleOptionalArguments)
    -> SelectionSet decodesTo Api.Object.OrganizationMemberConnection
    -> SelectionSet decodesTo Api.Object.Organization
membersWithRole fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "membersWithRole" optionalArgs____ object____ Basics.identity


{-| The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
-}
monthlyEstimatedSponsorsIncomeInCents : SelectionSet Int Api.Object.Organization
monthlyEstimatedSponsorsIncomeInCents =
    Object.selectionForField "Int" "monthlyEstimatedSponsorsIncomeInCents" [] Decode.int


{-| The organization's public profile name.
-}
name : SelectionSet (Maybe String) Api.Object.Organization
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


{-| The HTTP path creating a new team
-}
newTeamResourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Organization
newTeamResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "newTeamResourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL creating a new team
-}
newTeamUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Organization
newTeamUrl =
    Object.selectionForField "ScalarCodecs.Uri" "newTeamUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Indicates if email notification delivery for this organization is restricted to verified or approved domains.
-}
notificationDeliveryRestrictionEnabledSetting : SelectionSet Api.Enum.NotificationRestrictionSettingValue.NotificationRestrictionSettingValue Api.Object.Organization
notificationDeliveryRestrictionEnabledSetting =
    Object.selectionForField "Enum.NotificationRestrictionSettingValue.NotificationRestrictionSettingValue" "notificationDeliveryRestrictionEnabledSetting" [] Api.Enum.NotificationRestrictionSettingValue.decoder


{-| The billing email for the organization.
-}
organizationBillingEmail : SelectionSet (Maybe String) Api.Object.Organization
organizationBillingEmail =
    Object.selectionForField "(Maybe String)" "organizationBillingEmail" [] (Decode.string |> Decode.nullable)


type alias PackagesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , names : OptionalArgument (List (Maybe String))
    , repositoryId : OptionalArgument Api.ScalarCodecs.Id
    , packageType : OptionalArgument Api.Enum.PackageType.PackageType
    , orderBy : OptionalArgument Api.InputObject.PackageOrder
    }


{-| A list of packages under the owner.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - names - Find packages by their names.
  - repositoryId - Find packages in a repository by ID.
  - packageType - Filter registry package by type.
  - orderBy - Ordering of the returned packages.

-}
packages :
    (PackagesOptionalArguments -> PackagesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.PackageConnection
    -> SelectionSet decodesTo Api.Object.Organization
packages fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, names = Absent, repositoryId = Absent, packageType = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "names" filledInOptionals____.names (Encode.string |> Encode.maybe |> Encode.list), Argument.optional "repositoryId" filledInOptionals____.repositoryId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "packageType" filledInOptionals____.packageType (Encode.enum Api.Enum.PackageType.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodePackageOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "packages" optionalArgs____ object____ Basics.identity


type alias PendingMembersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users who have been invited to join this organization.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
pendingMembers :
    (PendingMembersOptionalArguments -> PendingMembersOptionalArguments)
    -> SelectionSet decodesTo Api.Object.UserConnection
    -> SelectionSet decodesTo Api.Object.Organization
pendingMembers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pendingMembers" optionalArgs____ object____ Basics.identity


type alias PinnableItemsOptionalArguments =
    { types : OptionalArgument (List Api.Enum.PinnableItemType.PinnableItemType)
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of repositories and gists this profile owner can pin to their profile.

  - types - Filter the types of pinnable items that are returned.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
pinnableItems :
    (PinnableItemsOptionalArguments -> PinnableItemsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.PinnableItemConnection
    -> SelectionSet decodesTo Api.Object.Organization
pinnableItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { types = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "types" filledInOptionals____.types (Encode.enum Api.Enum.PinnableItemType.toString |> Encode.list), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pinnableItems" optionalArgs____ object____ Basics.identity


type alias PinnedItemsOptionalArguments =
    { types : OptionalArgument (List Api.Enum.PinnableItemType.PinnableItemType)
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of repositories and gists this profile owner has pinned to their profile

  - types - Filter the types of pinned items that are returned.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
pinnedItems :
    (PinnedItemsOptionalArguments -> PinnedItemsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.PinnableItemConnection
    -> SelectionSet decodesTo Api.Object.Organization
pinnedItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { types = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "types" filledInOptionals____.types (Encode.enum Api.Enum.PinnableItemType.toString |> Encode.list), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pinnedItems" optionalArgs____ object____ Basics.identity


{-| Returns how many more items this profile owner can pin to their profile.
-}
pinnedItemsRemaining : SelectionSet Int Api.Object.Organization
pinnedItemsRemaining =
    Object.selectionForField "Int" "pinnedItemsRemaining" [] Decode.int


type alias ProjectRequiredArguments =
    { number : Int }


{-| Find project by number.

  - number - The project number to find.

-}
project :
    ProjectRequiredArguments
    -> SelectionSet decodesTo Api.Object.Project
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
project requiredArgs____ object____ =
    Object.selectionForCompositeField "project" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectNextRequiredArguments =
    { number : Int }


{-| Find a project by project (beta) number.
@deprecated The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. Follow the ProjectV2 guide at <https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/>, to find a suitable replacement. Removal on 2023-01-01 UTC.

  - number - The project (beta) number.

-}
projectNext :
    ProjectNextRequiredArguments
    -> SelectionSet decodesTo Api.Object.ProjectNext
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
projectNext requiredArgs____ object____ =
    Object.selectionForCompositeField "projectNext" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectV2RequiredArguments =
    { number : Int }


{-| Find a project by number.

  - number - The project number.

-}
projectV2 :
    ProjectV2RequiredArguments
    -> SelectionSet decodesTo Api.Object.ProjectV2
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
projectV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "projectV2" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectsOptionalArguments =
    { orderBy : OptionalArgument Api.InputObject.ProjectOrder
    , search : OptionalArgument String
    , states : OptionalArgument (List Api.Enum.ProjectState.ProjectState)
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of projects under the owner.

  - orderBy - Ordering options for projects returned from the connection
  - search - Query to search projects by, currently only searching by name.
  - states - A list of states to filter the projects by.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projects :
    (ProjectsOptionalArguments -> ProjectsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectConnection
    -> SelectionSet decodesTo Api.Object.Organization
projects fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { orderBy = Absent, search = Absent, states = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeProjectOrder, Argument.optional "search" filledInOptionals____.search Encode.string, Argument.optional "states" filledInOptionals____.states (Encode.enum Api.Enum.ProjectState.toString |> Encode.list), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projects" optionalArgs____ object____ Basics.identity


type alias ProjectsNextOptionalArguments =
    { query : OptionalArgument String
    , sortBy : OptionalArgument Api.Enum.ProjectNextOrderField.ProjectNextOrderField
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of projects (beta) under the owner.
@deprecated The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. Follow the ProjectV2 guide at <https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/>, to find a suitable replacement. Removal on 2023-01-01 UTC.

  - query - A project (beta) to search for under the the owner.
  - sortBy - How to order the returned projects (beta).
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projectsNext :
    (ProjectsNextOptionalArguments -> ProjectsNextOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectNextConnection
    -> SelectionSet decodesTo Api.Object.Organization
projectsNext fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { query = Absent, sortBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "sortBy" filledInOptionals____.sortBy (Encode.enum Api.Enum.ProjectNextOrderField.toString), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectsNext" optionalArgs____ object____ Basics.identity


{-| The HTTP path listing organization's projects
-}
projectsResourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Organization
projectsResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "projectsResourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL listing organization's projects
-}
projectsUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Organization
projectsUrl =
    Object.selectionForField "ScalarCodecs.Uri" "projectsUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias ProjectsV2OptionalArguments =
    { query : OptionalArgument String
    , orderBy : OptionalArgument Api.InputObject.ProjectV2Order
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of projects under the owner.

  - query - A project to search for under the the owner.
  - orderBy - How to order the returned projects.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projectsV2 :
    (ProjectsV2OptionalArguments -> ProjectsV2OptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectV2Connection
    -> SelectionSet decodesTo Api.Object.Organization
projectsV2 fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { query = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeProjectV2Order, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectsV2" optionalArgs____ object____ Basics.identity


type alias RecentProjectsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Recent projects that this user has modified in the context of the owner.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
recentProjects :
    (RecentProjectsOptionalArguments -> RecentProjectsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectV2Connection
    -> SelectionSet decodesTo Api.Object.Organization
recentProjects fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "recentProjects" optionalArgs____ object____ Basics.identity


type alias RepositoriesOptionalArguments =
    { privacy : OptionalArgument Api.Enum.RepositoryPrivacy.RepositoryPrivacy
    , orderBy : OptionalArgument Api.InputObject.RepositoryOrder
    , affiliations : OptionalArgument (List (Maybe Api.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , ownerAffiliations : OptionalArgument (List (Maybe Api.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , isLocked : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , isFork : OptionalArgument Bool
    }


{-| A list of repositories that the user owns.

  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - affiliations - Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
  - ownerAffiliations - Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - isFork - If non-null, filters repositories according to whether they are forks of another repository

-}
repositories :
    (RepositoriesOptionalArguments -> RepositoriesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.RepositoryConnection
    -> SelectionSet decodesTo Api.Object.Organization
repositories fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { privacy = Absent, orderBy = Absent, affiliations = Absent, ownerAffiliations = Absent, isLocked = Absent, after = Absent, before = Absent, first = Absent, last = Absent, isFork = Absent }

        optionalArgs____ =
            [ Argument.optional "privacy" filledInOptionals____.privacy (Encode.enum Api.Enum.RepositoryPrivacy.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeRepositoryOrder, Argument.optional "affiliations" filledInOptionals____.affiliations (Encode.enum Api.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "ownerAffiliations" filledInOptionals____.ownerAffiliations (Encode.enum Api.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "isLocked" filledInOptionals____.isLocked Encode.bool, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "isFork" filledInOptionals____.isFork Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "repositories" optionalArgs____ object____ Basics.identity


type alias RepositoryOptionalArguments =
    { followRenames : OptionalArgument Bool }


type alias RepositoryRequiredArguments =
    { name : String }


{-| Find Repository.

  - name - Name of Repository to find.
  - followRenames - Follow repository renames. If disabled, a repository referenced by its old name will return an error.

-}
repository :
    (RepositoryOptionalArguments -> RepositoryOptionalArguments)
    -> RepositoryRequiredArguments
    -> SelectionSet decodesTo Api.Object.Repository
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
repository fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { followRenames = Absent }

        optionalArgs____ =
            [ Argument.optional "followRenames" filledInOptionals____.followRenames Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "repository" (optionalArgs____ ++ [ Argument.required "name" requiredArgs____.name Encode.string ]) object____ (Basics.identity >> Decode.nullable)


type alias RepositoryDiscussionCommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , repositoryId : OptionalArgument Api.ScalarCodecs.Id
    , onlyAnswers : OptionalArgument Bool
    }


{-| Discussion comments this user has authored.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - repositoryId - Filter discussion comments to only those in a specific repository.
  - onlyAnswers - Filter discussion comments to only those that were marked as the answer

-}
repositoryDiscussionComments :
    (RepositoryDiscussionCommentsOptionalArguments -> RepositoryDiscussionCommentsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.DiscussionCommentConnection
    -> SelectionSet decodesTo Api.Object.Organization
repositoryDiscussionComments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, repositoryId = Absent, onlyAnswers = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "repositoryId" filledInOptionals____.repositoryId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "onlyAnswers" filledInOptionals____.onlyAnswers Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "repositoryDiscussionComments" optionalArgs____ object____ Basics.identity


type alias RepositoryDiscussionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.DiscussionOrder
    , repositoryId : OptionalArgument Api.ScalarCodecs.Id
    , answered : OptionalArgument Bool
    }


{-| Discussions this user has started.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for discussions returned from the connection.
  - repositoryId - Filter discussions to only those in a specific repository.
  - answered - Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.

-}
repositoryDiscussions :
    (RepositoryDiscussionsOptionalArguments -> RepositoryDiscussionsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.DiscussionConnection
    -> SelectionSet decodesTo Api.Object.Organization
repositoryDiscussions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent, repositoryId = Absent, answered = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeDiscussionOrder, Argument.optional "repositoryId" filledInOptionals____.repositoryId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "answered" filledInOptionals____.answered Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "repositoryDiscussions" optionalArgs____ object____ Basics.identity


type alias RepositoryMigrationsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , state : OptionalArgument Api.Enum.MigrationState.MigrationState
    , repositoryName : OptionalArgument String
    , orderBy : OptionalArgument Api.InputObject.RepositoryMigrationOrder
    }


{-| A list of all repository migrations for this organization.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - state - Filter repository migrations by state.
  - repositoryName - Filter repository migrations by repository name.
  - orderBy - Ordering options for repository migrations returned.

-}
repositoryMigrations :
    (RepositoryMigrationsOptionalArguments -> RepositoryMigrationsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.RepositoryMigrationConnection
    -> SelectionSet decodesTo Api.Object.Organization
repositoryMigrations fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, state = Absent, repositoryName = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "state" filledInOptionals____.state (Encode.enum Api.Enum.MigrationState.toString), Argument.optional "repositoryName" filledInOptionals____.repositoryName Encode.string, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeRepositoryMigrationOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "repositoryMigrations" optionalArgs____ object____ Basics.identity


{-| When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication.
-}
requiresTwoFactorAuthentication : SelectionSet (Maybe Bool) Api.Object.Organization
requiresTwoFactorAuthentication =
    Object.selectionForField "(Maybe Bool)" "requiresTwoFactorAuthentication" [] (Decode.bool |> Decode.nullable)


{-| The HTTP path for this organization.
-}
resourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Organization
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The Organization's SAML identity providers
-}
samlIdentityProvider :
    SelectionSet decodesTo Api.Object.OrganizationIdentityProvider
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
samlIdentityProvider object____ =
    Object.selectionForCompositeField "samlIdentityProvider" [] object____ (Basics.identity >> Decode.nullable)


type alias SponsoringOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.SponsorOrder
    }


{-| List of users and organizations this entity is sponsoring.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for the users and organizations returned from the connection.

-}
sponsoring :
    (SponsoringOptionalArguments -> SponsoringOptionalArguments)
    -> SelectionSet decodesTo Api.Object.SponsorConnection
    -> SelectionSet decodesTo Api.Object.Organization
sponsoring fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeSponsorOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsoring" optionalArgs____ object____ Basics.identity


type alias SponsorsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , tierId : OptionalArgument Api.ScalarCodecs.Id
    , orderBy : OptionalArgument Api.InputObject.SponsorOrder
    }


{-| List of sponsors for this user or organization.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - tierId - If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.
  - orderBy - Ordering options for sponsors returned from the connection.

-}
sponsors :
    (SponsorsOptionalArguments -> SponsorsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.SponsorConnection
    -> SelectionSet decodesTo Api.Object.Organization
sponsors fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, tierId = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "tierId" filledInOptionals____.tierId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeSponsorOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsors" optionalArgs____ object____ Basics.identity


type alias SponsorsActivitiesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , period : OptionalArgument Api.Enum.SponsorsActivityPeriod.SponsorsActivityPeriod
    , orderBy : OptionalArgument Api.InputObject.SponsorsActivityOrder
    , actions : OptionalArgument (List Api.Enum.SponsorsActivityAction.SponsorsActivityAction)
    }


{-| Events involving this sponsorable, such as new sponsorships.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - period - Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred.
  - orderBy - Ordering options for activity returned from the connection.
  - actions - Filter activities to only the specified actions.

-}
sponsorsActivities :
    (SponsorsActivitiesOptionalArguments -> SponsorsActivitiesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.SponsorsActivityConnection
    -> SelectionSet decodesTo Api.Object.Organization
sponsorsActivities fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, period = Absent, orderBy = Absent, actions = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "period" filledInOptionals____.period (Encode.enum Api.Enum.SponsorsActivityPeriod.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeSponsorsActivityOrder, Argument.optional "actions" filledInOptionals____.actions (Encode.enum Api.Enum.SponsorsActivityAction.toString |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsorsActivities" optionalArgs____ object____ Basics.identity


{-| The GitHub Sponsors listing for this user or organization.
-}
sponsorsListing :
    SelectionSet decodesTo Api.Object.SponsorsListing
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
sponsorsListing object____ =
    Object.selectionForCompositeField "sponsorsListing" [] object____ (Basics.identity >> Decode.nullable)


{-| The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.
-}
sponsorshipForViewerAsSponsor :
    SelectionSet decodesTo Api.Object.Sponsorship
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
sponsorshipForViewerAsSponsor object____ =
    Object.selectionForCompositeField "sponsorshipForViewerAsSponsor" [] object____ (Basics.identity >> Decode.nullable)


{-| The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.
-}
sponsorshipForViewerAsSponsorable :
    SelectionSet decodesTo Api.Object.Sponsorship
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
sponsorshipForViewerAsSponsorable object____ =
    Object.selectionForCompositeField "sponsorshipForViewerAsSponsorable" [] object____ (Basics.identity >> Decode.nullable)


type alias SponsorshipNewslettersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.SponsorshipNewsletterOrder
    }


{-| List of sponsorship updates sent from this sponsorable to sponsors.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for sponsorship updates returned from the connection.

-}
sponsorshipNewsletters :
    (SponsorshipNewslettersOptionalArguments -> SponsorshipNewslettersOptionalArguments)
    -> SelectionSet decodesTo Api.Object.SponsorshipNewsletterConnection
    -> SelectionSet decodesTo Api.Object.Organization
sponsorshipNewsletters fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeSponsorshipNewsletterOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsorshipNewsletters" optionalArgs____ object____ Basics.identity


type alias SponsorshipsAsMaintainerOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , includePrivate : OptionalArgument Bool
    , orderBy : OptionalArgument Api.InputObject.SponsorshipOrder
    }


{-| This object's sponsorships as the maintainer.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - includePrivate - Whether or not to include private sponsorships in the result set
  - orderBy - Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.

-}
sponsorshipsAsMaintainer :
    (SponsorshipsAsMaintainerOptionalArguments -> SponsorshipsAsMaintainerOptionalArguments)
    -> SelectionSet decodesTo Api.Object.SponsorshipConnection
    -> SelectionSet decodesTo Api.Object.Organization
sponsorshipsAsMaintainer fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, includePrivate = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "includePrivate" filledInOptionals____.includePrivate Encode.bool, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeSponsorshipOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsorshipsAsMaintainer" optionalArgs____ object____ Basics.identity


type alias SponsorshipsAsSponsorOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.SponsorshipOrder
    }


{-| This object's sponsorships as the sponsor.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.

-}
sponsorshipsAsSponsor :
    (SponsorshipsAsSponsorOptionalArguments -> SponsorshipsAsSponsorOptionalArguments)
    -> SelectionSet decodesTo Api.Object.SponsorshipConnection
    -> SelectionSet decodesTo Api.Object.Organization
sponsorshipsAsSponsor fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeSponsorshipOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsorshipsAsSponsor" optionalArgs____ object____ Basics.identity


type alias TeamRequiredArguments =
    { slug : String }


{-| Find an organization's team by its slug.

  - slug - The name or slug of the team to find.

-}
team :
    TeamRequiredArguments
    -> SelectionSet decodesTo Api.Object.Team
    -> SelectionSet (Maybe decodesTo) Api.Object.Organization
team requiredArgs____ object____ =
    Object.selectionForCompositeField "team" [ Argument.required "slug" requiredArgs____.slug Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias TeamsOptionalArguments =
    { privacy : OptionalArgument Api.Enum.TeamPrivacy.TeamPrivacy
    , role : OptionalArgument Api.Enum.TeamRole.TeamRole
    , query : OptionalArgument String
    , userLogins : OptionalArgument (List String)
    , orderBy : OptionalArgument Api.InputObject.TeamOrder
    , ldapMapped : OptionalArgument Bool
    , rootTeamsOnly : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of teams in this organization.

  - privacy - If non-null, filters teams according to privacy
  - role - If non-null, filters teams according to whether the viewer is an admin or member on team
  - query - If non-null, filters teams with query on team name and team slug
  - userLogins - User logins to filter by
  - orderBy - Ordering options for teams returned from the connection
  - ldapMapped - If true, filters teams that are mapped to an LDAP Group (Enterprise only)
  - rootTeamsOnly - If true, restrict to only root teams
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
teams :
    (TeamsOptionalArguments -> TeamsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.TeamConnection
    -> SelectionSet decodesTo Api.Object.Organization
teams fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { privacy = Absent, role = Absent, query = Absent, userLogins = Absent, orderBy = Absent, ldapMapped = Absent, rootTeamsOnly = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "privacy" filledInOptionals____.privacy (Encode.enum Api.Enum.TeamPrivacy.toString), Argument.optional "role" filledInOptionals____.role (Encode.enum Api.Enum.TeamRole.toString), Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "userLogins" filledInOptionals____.userLogins (Encode.string |> Encode.list), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeTeamOrder, Argument.optional "ldapMapped" filledInOptionals____.ldapMapped Encode.bool, Argument.optional "rootTeamsOnly" filledInOptionals____.rootTeamsOnly Encode.bool, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "teams" optionalArgs____ object____ Basics.identity


{-| The HTTP path listing organization's teams
-}
teamsResourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Organization
teamsResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "teamsResourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL listing organization's teams
-}
teamsUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Organization
teamsUrl =
    Object.selectionForField "ScalarCodecs.Uri" "teamsUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The organization's Twitter username.
-}
twitterUsername : SelectionSet (Maybe String) Api.Object.Organization
twitterUsername =
    Object.selectionForField "(Maybe String)" "twitterUsername" [] (Decode.string |> Decode.nullable)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Organization
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this organization.
-}
url : SelectionSet Api.ScalarCodecs.Uri Api.Object.Organization
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Organization is adminable by the viewer.
-}
viewerCanAdminister : SelectionSet Bool Api.Object.Organization
viewerCanAdminister =
    Object.selectionForField "Bool" "viewerCanAdminister" [] Decode.bool


{-| Can the viewer pin repositories and gists to the profile?
-}
viewerCanChangePinnedItems : SelectionSet Bool Api.Object.Organization
viewerCanChangePinnedItems =
    Object.selectionForField "Bool" "viewerCanChangePinnedItems" [] Decode.bool


{-| Can the current viewer create new projects on this owner.
-}
viewerCanCreateProjects : SelectionSet Bool Api.Object.Organization
viewerCanCreateProjects =
    Object.selectionForField "Bool" "viewerCanCreateProjects" [] Decode.bool


{-| Viewer can create repositories on this organization
-}
viewerCanCreateRepositories : SelectionSet Bool Api.Object.Organization
viewerCanCreateRepositories =
    Object.selectionForField "Bool" "viewerCanCreateRepositories" [] Decode.bool


{-| Viewer can create teams on this organization.
-}
viewerCanCreateTeams : SelectionSet Bool Api.Object.Organization
viewerCanCreateTeams =
    Object.selectionForField "Bool" "viewerCanCreateTeams" [] Decode.bool


{-| Whether or not the viewer is able to sponsor this user/organization.
-}
viewerCanSponsor : SelectionSet Bool Api.Object.Organization
viewerCanSponsor =
    Object.selectionForField "Bool" "viewerCanSponsor" [] Decode.bool


{-| Viewer is an active member of this organization.
-}
viewerIsAMember : SelectionSet Bool Api.Object.Organization
viewerIsAMember =
    Object.selectionForField "Bool" "viewerIsAMember" [] Decode.bool


{-| Whether or not this Organization is followed by the viewer.
-}
viewerIsFollowing : SelectionSet Bool Api.Object.Organization
viewerIsFollowing =
    Object.selectionForField "Bool" "viewerIsFollowing" [] Decode.bool


{-| True if the viewer is sponsoring this user/organization.
-}
viewerIsSponsoring : SelectionSet Bool Api.Object.Organization
viewerIsSponsoring =
    Object.selectionForField "Bool" "viewerIsSponsoring" [] Decode.bool


{-| Whether contributors are required to sign off on web-based commits for repositories in this organization.
-}
webCommitSignoffRequired : SelectionSet Bool Api.Object.Organization
webCommitSignoffRequired =
    Object.selectionForField "Bool" "webCommitSignoffRequired" [] Decode.bool


{-| The organization's public profile URL.
-}
websiteUrl : SelectionSet (Maybe Api.ScalarCodecs.Uri) Api.Object.Organization
websiteUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "websiteUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)
