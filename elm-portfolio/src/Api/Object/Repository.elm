-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Repository exposing (..)

import Api.Enum.CollaboratorAffiliation
import Api.Enum.IssueState
import Api.Enum.MergeCommitMessage
import Api.Enum.MergeCommitTitle
import Api.Enum.MilestoneState
import Api.Enum.OrderDirection
import Api.Enum.PackageType
import Api.Enum.ProjectNextOrderField
import Api.Enum.ProjectState
import Api.Enum.PullRequestMergeMethod
import Api.Enum.PullRequestState
import Api.Enum.RepositoryAffiliation
import Api.Enum.RepositoryLockReason
import Api.Enum.RepositoryPermission
import Api.Enum.RepositoryPrivacy
import Api.Enum.RepositoryVisibility
import Api.Enum.RepositoryVulnerabilityAlertDependencyScope
import Api.Enum.RepositoryVulnerabilityAlertState
import Api.Enum.SquashMergeCommitMessage
import Api.Enum.SquashMergeCommitTitle
import Api.Enum.SubscriptionState
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
-}
allowUpdateBranch : SelectionSet Bool Api.Object.Repository
allowUpdateBranch =
    Object.selectionForField "Bool" "allowUpdateBranch" [] Decode.bool


type alias AssignableUsersOptionalArguments =
    { query : OptionalArgument String
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users that can be assigned to issues in this repository.

  - query - Filters users with query on user name and login
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
assignableUsers :
    (AssignableUsersOptionalArguments -> AssignableUsersOptionalArguments)
    -> SelectionSet decodesTo Api.Object.UserConnection
    -> SelectionSet decodesTo Api.Object.Repository
assignableUsers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { query = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "assignableUsers" optionalArgs____ object____ Basics.identity


{-| Whether or not Auto-merge can be enabled on pull requests in this repository.
-}
autoMergeAllowed : SelectionSet Bool Api.Object.Repository
autoMergeAllowed =
    Object.selectionForField "Bool" "autoMergeAllowed" [] Decode.bool


type alias BranchProtectionRulesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of branch protection rules for this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
branchProtectionRules :
    (BranchProtectionRulesOptionalArguments -> BranchProtectionRulesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.BranchProtectionRuleConnection
    -> SelectionSet decodesTo Api.Object.Repository
branchProtectionRules fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "branchProtectionRules" optionalArgs____ object____ Basics.identity


{-| Returns the code of conduct for this repository
-}
codeOfConduct :
    SelectionSet decodesTo Api.Object.CodeOfConduct
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
codeOfConduct object____ =
    Object.selectionForCompositeField "codeOfConduct" [] object____ (Basics.identity >> Decode.nullable)


type alias CodeownersOptionalArguments =
    { refName : OptionalArgument String }


{-| Information extracted from the repository's `CODEOWNERS` file.

  - refName - The ref name used to return the associated `CODEOWNERS` file.

-}
codeowners :
    (CodeownersOptionalArguments -> CodeownersOptionalArguments)
    -> SelectionSet decodesTo Api.Object.RepositoryCodeowners
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
codeowners fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { refName = Absent }

        optionalArgs____ =
            [ Argument.optional "refName" filledInOptionals____.refName Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "codeowners" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias CollaboratorsOptionalArguments =
    { affiliation : OptionalArgument Api.Enum.CollaboratorAffiliation.CollaboratorAffiliation
    , query : OptionalArgument String
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of collaborators associated with the repository.

  - affiliation - Collaborators affiliation level with a repository.
  - query - Filters users with query on user name and login
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
collaborators :
    (CollaboratorsOptionalArguments -> CollaboratorsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.RepositoryCollaboratorConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
collaborators fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { affiliation = Absent, query = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "affiliation" filledInOptionals____.affiliation (Encode.enum Api.Enum.CollaboratorAffiliation.toString), Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "collaborators" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias CommitCommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of commit comments associated with the repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
commitComments :
    (CommitCommentsOptionalArguments -> CommitCommentsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.CommitCommentConnection
    -> SelectionSet decodesTo Api.Object.Repository
commitComments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "commitComments" optionalArgs____ object____ Basics.identity


{-| Returns a list of contact links associated to the repository
-}
contactLinks :
    SelectionSet decodesTo Api.Object.RepositoryContactLink
    -> SelectionSet (Maybe (List decodesTo)) Api.Object.Repository
contactLinks object____ =
    Object.selectionForCompositeField "contactLinks" [] object____ (Basics.identity >> Decode.list >> Decode.nullable)


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Repository
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Api.Object.Repository
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The Ref associated with the repository's default branch.
-}
defaultBranchRef :
    SelectionSet decodesTo Api.Object.Ref
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
defaultBranchRef object____ =
    Object.selectionForCompositeField "defaultBranchRef" [] object____ (Basics.identity >> Decode.nullable)


{-| Whether or not branches are automatically deleted when merged in this repository.
-}
deleteBranchOnMerge : SelectionSet Bool Api.Object.Repository
deleteBranchOnMerge =
    Object.selectionForField "Bool" "deleteBranchOnMerge" [] Decode.bool


type alias DeployKeysOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of deploy keys that are on this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
deployKeys :
    (DeployKeysOptionalArguments -> DeployKeysOptionalArguments)
    -> SelectionSet decodesTo Api.Object.DeployKeyConnection
    -> SelectionSet decodesTo Api.Object.Repository
deployKeys fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "deployKeys" optionalArgs____ object____ Basics.identity


type alias DeploymentsOptionalArguments =
    { environments : OptionalArgument (List String)
    , orderBy : OptionalArgument Api.InputObject.DeploymentOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Deployments associated with the repository

  - environments - Environments to list deployments for
  - orderBy - Ordering options for deployments returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
deployments :
    (DeploymentsOptionalArguments -> DeploymentsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.DeploymentConnection
    -> SelectionSet decodesTo Api.Object.Repository
deployments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { environments = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "environments" filledInOptionals____.environments (Encode.string |> Encode.list), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeDeploymentOrder, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "deployments" optionalArgs____ object____ Basics.identity


{-| The description of the repository.
-}
description : SelectionSet (Maybe String) Api.Object.Repository
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| The description of the repository rendered to HTML.
-}
descriptionHTML : SelectionSet Api.ScalarCodecs.Html Api.Object.Repository
descriptionHTML =
    Object.selectionForField "ScalarCodecs.Html" "descriptionHTML" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


type alias DiscussionRequiredArguments =
    { number : Int }


{-| Returns a single discussion from the current repository by number.

  - number - The number for the discussion to be returned.

-}
discussion :
    DiscussionRequiredArguments
    -> SelectionSet decodesTo Api.Object.Discussion
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
discussion requiredArgs____ object____ =
    Object.selectionForCompositeField "discussion" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias DiscussionCategoriesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , filterByAssignable : OptionalArgument Bool
    }


{-| A list of discussion categories that are available in the repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - filterByAssignable - Filter by categories that are assignable by the viewer.

-}
discussionCategories :
    (DiscussionCategoriesOptionalArguments -> DiscussionCategoriesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.DiscussionCategoryConnection
    -> SelectionSet decodesTo Api.Object.Repository
discussionCategories fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, filterByAssignable = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "filterByAssignable" filledInOptionals____.filterByAssignable Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "discussionCategories" optionalArgs____ object____ Basics.identity


type alias DiscussionCategoryRequiredArguments =
    { slug : String }


{-| A discussion category by slug.

  - slug - The slug of the discussion category to be returned.

-}
discussionCategory :
    DiscussionCategoryRequiredArguments
    -> SelectionSet decodesTo Api.Object.DiscussionCategory
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
discussionCategory requiredArgs____ object____ =
    Object.selectionForCompositeField "discussionCategory" [ Argument.required "slug" requiredArgs____.slug Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias DiscussionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , categoryId : OptionalArgument Api.ScalarCodecs.Id
    , orderBy : OptionalArgument Api.InputObject.DiscussionOrder
    }


{-| A list of discussions that have been opened in the repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - categoryId - Only include discussions that belong to the category with this ID.
  - orderBy - Ordering options for discussions returned from the connection.

-}
discussions :
    (DiscussionsOptionalArguments -> DiscussionsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.DiscussionConnection
    -> SelectionSet decodesTo Api.Object.Repository
discussions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, categoryId = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "categoryId" filledInOptionals____.categoryId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeDiscussionOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "discussions" optionalArgs____ object____ Basics.identity


{-| The number of kilobytes this repository occupies on disk.
-}
diskUsage : SelectionSet (Maybe Int) Api.Object.Repository
diskUsage =
    Object.selectionForField "(Maybe Int)" "diskUsage" [] (Decode.int |> Decode.nullable)


type alias EnvironmentRequiredArguments =
    { name : String }


{-| Returns a single active environment from the current repository by name.

  - name - The name of the environment to be returned.

-}
environment :
    EnvironmentRequiredArguments
    -> SelectionSet decodesTo Api.Object.Environment
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
environment requiredArgs____ object____ =
    Object.selectionForCompositeField "environment" [ Argument.required "name" requiredArgs____.name Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias EnvironmentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of environments that are in this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
environments :
    (EnvironmentsOptionalArguments -> EnvironmentsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.EnvironmentConnection
    -> SelectionSet decodesTo Api.Object.Repository
environments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "environments" optionalArgs____ object____ Basics.identity


{-| Returns how many forks there are of this repository in the whole network.
-}
forkCount : SelectionSet Int Api.Object.Repository
forkCount =
    Object.selectionForField "Int" "forkCount" [] Decode.int


{-| Whether this repository allows forks.
-}
forkingAllowed : SelectionSet Bool Api.Object.Repository
forkingAllowed =
    Object.selectionForField "Bool" "forkingAllowed" [] Decode.bool


type alias ForksOptionalArguments =
    { privacy : OptionalArgument Api.Enum.RepositoryPrivacy.RepositoryPrivacy
    , orderBy : OptionalArgument Api.InputObject.RepositoryOrder
    , affiliations : OptionalArgument (List (Maybe Api.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , ownerAffiliations : OptionalArgument (List (Maybe Api.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , isLocked : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of direct forked repositories.

  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - affiliations - Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
  - ownerAffiliations - Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
forks :
    (ForksOptionalArguments -> ForksOptionalArguments)
    -> SelectionSet decodesTo Api.Object.RepositoryConnection
    -> SelectionSet decodesTo Api.Object.Repository
forks fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { privacy = Absent, orderBy = Absent, affiliations = Absent, ownerAffiliations = Absent, isLocked = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "privacy" filledInOptionals____.privacy (Encode.enum Api.Enum.RepositoryPrivacy.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeRepositoryOrder, Argument.optional "affiliations" filledInOptionals____.affiliations (Encode.enum Api.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "ownerAffiliations" filledInOptionals____.ownerAffiliations (Encode.enum Api.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "isLocked" filledInOptionals____.isLocked Encode.bool, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "forks" optionalArgs____ object____ Basics.identity


{-| The funding links for this repository
-}
fundingLinks :
    SelectionSet decodesTo Api.Object.FundingLink
    -> SelectionSet (List decodesTo) Api.Object.Repository
fundingLinks object____ =
    Object.selectionForCompositeField "fundingLinks" [] object____ (Basics.identity >> Decode.list)


{-| Indicates if the repository has issues feature enabled.
-}
hasIssuesEnabled : SelectionSet Bool Api.Object.Repository
hasIssuesEnabled =
    Object.selectionForField "Bool" "hasIssuesEnabled" [] Decode.bool


{-| Indicates if the repository has the Projects feature enabled.
-}
hasProjectsEnabled : SelectionSet Bool Api.Object.Repository
hasProjectsEnabled =
    Object.selectionForField "Bool" "hasProjectsEnabled" [] Decode.bool


{-| Indicates if the repository has wiki feature enabled.
-}
hasWikiEnabled : SelectionSet Bool Api.Object.Repository
hasWikiEnabled =
    Object.selectionForField "Bool" "hasWikiEnabled" [] Decode.bool


{-| The repository's URL.
-}
homepageUrl : SelectionSet (Maybe Api.ScalarCodecs.Uri) Api.Object.Repository
homepageUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "homepageUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


id : SelectionSet Api.ScalarCodecs.Id Api.Object.Repository
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The interaction ability settings for this repository.
-}
interactionAbility :
    SelectionSet decodesTo Api.Object.RepositoryInteractionAbility
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
interactionAbility object____ =
    Object.selectionForCompositeField "interactionAbility" [] object____ (Basics.identity >> Decode.nullable)


{-| Indicates if the repository is unmaintained.
-}
isArchived : SelectionSet Bool Api.Object.Repository
isArchived =
    Object.selectionForField "Bool" "isArchived" [] Decode.bool


{-| Returns true if blank issue creation is allowed
-}
isBlankIssuesEnabled : SelectionSet Bool Api.Object.Repository
isBlankIssuesEnabled =
    Object.selectionForField "Bool" "isBlankIssuesEnabled" [] Decode.bool


{-| Returns whether or not this repository disabled.
-}
isDisabled : SelectionSet Bool Api.Object.Repository
isDisabled =
    Object.selectionForField "Bool" "isDisabled" [] Decode.bool


{-| Returns whether or not this repository is empty.
-}
isEmpty : SelectionSet Bool Api.Object.Repository
isEmpty =
    Object.selectionForField "Bool" "isEmpty" [] Decode.bool


{-| Identifies if the repository is a fork.
-}
isFork : SelectionSet Bool Api.Object.Repository
isFork =
    Object.selectionForField "Bool" "isFork" [] Decode.bool


{-| Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
-}
isInOrganization : SelectionSet Bool Api.Object.Repository
isInOrganization =
    Object.selectionForField "Bool" "isInOrganization" [] Decode.bool


{-| Indicates if the repository has been locked or not.
-}
isLocked : SelectionSet Bool Api.Object.Repository
isLocked =
    Object.selectionForField "Bool" "isLocked" [] Decode.bool


{-| Identifies if the repository is a mirror.
-}
isMirror : SelectionSet Bool Api.Object.Repository
isMirror =
    Object.selectionForField "Bool" "isMirror" [] Decode.bool


{-| Identifies if the repository is private or internal.
-}
isPrivate : SelectionSet Bool Api.Object.Repository
isPrivate =
    Object.selectionForField "Bool" "isPrivate" [] Decode.bool


{-| Returns true if this repository has a security policy
-}
isSecurityPolicyEnabled : SelectionSet (Maybe Bool) Api.Object.Repository
isSecurityPolicyEnabled =
    Object.selectionForField "(Maybe Bool)" "isSecurityPolicyEnabled" [] (Decode.bool |> Decode.nullable)


{-| Identifies if the repository is a template that can be used to generate new repositories.
-}
isTemplate : SelectionSet Bool Api.Object.Repository
isTemplate =
    Object.selectionForField "Bool" "isTemplate" [] Decode.bool


{-| Is this repository a user configuration repository?
-}
isUserConfigurationRepository : SelectionSet Bool Api.Object.Repository
isUserConfigurationRepository =
    Object.selectionForField "Bool" "isUserConfigurationRepository" [] Decode.bool


type alias IssueRequiredArguments =
    { number : Int }


{-| Returns a single issue from the current repository by number.

  - number - The number for the issue to be returned.

-}
issue :
    IssueRequiredArguments
    -> SelectionSet decodesTo Api.Object.Issue
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
issue requiredArgs____ object____ =
    Object.selectionForCompositeField "issue" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias IssueOrPullRequestRequiredArguments =
    { number : Int }


{-| Returns a single issue-like object from the current repository by number.

  - number - The number for the issue to be returned.

-}
issueOrPullRequest :
    IssueOrPullRequestRequiredArguments
    -> SelectionSet decodesTo Api.Union.IssueOrPullRequest
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
issueOrPullRequest requiredArgs____ object____ =
    Object.selectionForCompositeField "issueOrPullRequest" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


{-| Returns a list of issue templates associated to the repository
-}
issueTemplates :
    SelectionSet decodesTo Api.Object.IssueTemplate
    -> SelectionSet (Maybe (List decodesTo)) Api.Object.Repository
issueTemplates object____ =
    Object.selectionForCompositeField "issueTemplates" [] object____ (Basics.identity >> Decode.list >> Decode.nullable)


type alias IssuesOptionalArguments =
    { orderBy : OptionalArgument Api.InputObject.IssueOrder
    , labels : OptionalArgument (List String)
    , states : OptionalArgument (List Api.Enum.IssueState.IssueState)
    , filterBy : OptionalArgument Api.InputObject.IssueFilters
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of issues that have been opened in the repository.

  - orderBy - Ordering options for issues returned from the connection.
  - labels - A list of label names to filter the pull requests by.
  - states - A list of states to filter the issues by.
  - filterBy - Filtering options for issues returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
issues :
    (IssuesOptionalArguments -> IssuesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.IssueConnection
    -> SelectionSet decodesTo Api.Object.Repository
issues fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { orderBy = Absent, labels = Absent, states = Absent, filterBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeIssueOrder, Argument.optional "labels" filledInOptionals____.labels (Encode.string |> Encode.list), Argument.optional "states" filledInOptionals____.states (Encode.enum Api.Enum.IssueState.toString |> Encode.list), Argument.optional "filterBy" filledInOptionals____.filterBy Api.InputObject.encodeIssueFilters, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "issues" optionalArgs____ object____ Basics.identity


type alias LabelRequiredArguments =
    { name : String }


{-| Returns a single label by name

  - name - Label name

-}
label :
    LabelRequiredArguments
    -> SelectionSet decodesTo Api.Object.Label
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
label requiredArgs____ object____ =
    Object.selectionForCompositeField "label" [ Argument.required "name" requiredArgs____.name Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias LabelsOptionalArguments =
    { orderBy : OptionalArgument Api.InputObject.LabelOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , query : OptionalArgument String
    }


{-| A list of labels associated with the repository.

  - orderBy - Ordering options for labels returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - query - If provided, searches labels by name and description.

-}
labels :
    (LabelsOptionalArguments -> LabelsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.LabelConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
labels fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent, query = Absent }

        optionalArgs____ =
            [ Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeLabelOrder, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "query" filledInOptionals____.query Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "labels" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias LanguagesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.LanguageOrder
    }


{-| A list containing a breakdown of the language composition of the repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Order for connection

-}
languages :
    (LanguagesOptionalArguments -> LanguagesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.LanguageConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
languages fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeLanguageOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "languages" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| Get the latest release for the repository if one exists.
-}
latestRelease :
    SelectionSet decodesTo Api.Object.Release
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
latestRelease object____ =
    Object.selectionForCompositeField "latestRelease" [] object____ (Basics.identity >> Decode.nullable)


{-| The license associated with the repository
-}
licenseInfo :
    SelectionSet decodesTo Api.Object.License
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
licenseInfo object____ =
    Object.selectionForCompositeField "licenseInfo" [] object____ (Basics.identity >> Decode.nullable)


{-| The reason the repository has been locked.
-}
lockReason : SelectionSet (Maybe Api.Enum.RepositoryLockReason.RepositoryLockReason) Api.Object.Repository
lockReason =
    Object.selectionForField "(Maybe Enum.RepositoryLockReason.RepositoryLockReason)" "lockReason" [] (Api.Enum.RepositoryLockReason.decoder |> Decode.nullable)


type alias MentionableUsersOptionalArguments =
    { query : OptionalArgument String
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of Users that can be mentioned in the context of the repository.

  - query - Filters users with query on user name and login
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
mentionableUsers :
    (MentionableUsersOptionalArguments -> MentionableUsersOptionalArguments)
    -> SelectionSet decodesTo Api.Object.UserConnection
    -> SelectionSet decodesTo Api.Object.Repository
mentionableUsers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { query = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "mentionableUsers" optionalArgs____ object____ Basics.identity


{-| Whether or not PRs are merged with a merge commit on this repository.
-}
mergeCommitAllowed : SelectionSet Bool Api.Object.Repository
mergeCommitAllowed =
    Object.selectionForField "Bool" "mergeCommitAllowed" [] Decode.bool


{-| How the default commit message will be generated when merging a pull request.
-}
mergeCommitMessage : SelectionSet Api.Enum.MergeCommitMessage.MergeCommitMessage Api.Object.Repository
mergeCommitMessage =
    Object.selectionForField "Enum.MergeCommitMessage.MergeCommitMessage" "mergeCommitMessage" [] Api.Enum.MergeCommitMessage.decoder


{-| How the default commit title will be generated when merging a pull request.
-}
mergeCommitTitle : SelectionSet Api.Enum.MergeCommitTitle.MergeCommitTitle Api.Object.Repository
mergeCommitTitle =
    Object.selectionForField "Enum.MergeCommitTitle.MergeCommitTitle" "mergeCommitTitle" [] Api.Enum.MergeCommitTitle.decoder


type alias MilestoneRequiredArguments =
    { number : Int }


{-| Returns a single milestone from the current repository by number.

  - number - The number for the milestone to be returned.

-}
milestone :
    MilestoneRequiredArguments
    -> SelectionSet decodesTo Api.Object.Milestone
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
milestone requiredArgs____ object____ =
    Object.selectionForCompositeField "milestone" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias MilestonesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , states : OptionalArgument (List Api.Enum.MilestoneState.MilestoneState)
    , orderBy : OptionalArgument Api.InputObject.MilestoneOrder
    , query : OptionalArgument String
    }


{-| A list of milestones associated with the repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - states - Filter by the state of the milestones.
  - orderBy - Ordering options for milestones.
  - query - Filters milestones with a query on the title

-}
milestones :
    (MilestonesOptionalArguments -> MilestonesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.MilestoneConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
milestones fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, states = Absent, orderBy = Absent, query = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "states" filledInOptionals____.states (Encode.enum Api.Enum.MilestoneState.toString |> Encode.list), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeMilestoneOrder, Argument.optional "query" filledInOptionals____.query Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "milestones" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| The repository's original mirror URL.
-}
mirrorUrl : SelectionSet (Maybe Api.ScalarCodecs.Uri) Api.Object.Repository
mirrorUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "mirrorUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


{-| The name of the repository.
-}
name : SelectionSet String Api.Object.Repository
name =
    Object.selectionForField "String" "name" [] Decode.string


{-| The repository's name with owner.
-}
nameWithOwner : SelectionSet String Api.Object.Repository
nameWithOwner =
    Object.selectionForField "String" "nameWithOwner" [] Decode.string


type alias ObjectOptionalArguments =
    { oid : OptionalArgument Api.ScalarCodecs.GitObjectID
    , expression : OptionalArgument String
    }


{-| A Git object in the repository

  - oid - The Git object ID
  - expression - A Git revision expression suitable for rev-parse

-}
object :
    (ObjectOptionalArguments -> ObjectOptionalArguments)
    -> SelectionSet decodesTo Api.Interface.GitObject
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
object fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { oid = Absent, expression = Absent }

        optionalArgs____ =
            [ Argument.optional "oid" filledInOptionals____.oid (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecGitObjectID), Argument.optional "expression" filledInOptionals____.expression Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "object" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| The image used to represent this repository in Open Graph data.
-}
openGraphImageUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Repository
openGraphImageUrl =
    Object.selectionForField "ScalarCodecs.Uri" "openGraphImageUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The User owner of the repository.
-}
owner :
    SelectionSet decodesTo Api.Interface.RepositoryOwner
    -> SelectionSet decodesTo Api.Object.Repository
owner object____ =
    Object.selectionForCompositeField "owner" [] object____ Basics.identity


type alias PackagesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , names : OptionalArgument (List (Maybe String))
    , repositoryId : OptionalArgument Api.ScalarCodecs.Id
    , packageType : OptionalArgument Api.Enum.PackageType.PackageType
    , orderBy : OptionalArgument Api.InputObject.PackageOrder
    }


{-| A list of packages under the owner.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - names - Find packages by their names.
  - repositoryId - Find packages in a repository by ID.
  - packageType - Filter registry package by type.
  - orderBy - Ordering of the returned packages.

-}
packages :
    (PackagesOptionalArguments -> PackagesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.PackageConnection
    -> SelectionSet decodesTo Api.Object.Repository
packages fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, names = Absent, repositoryId = Absent, packageType = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "names" filledInOptionals____.names (Encode.string |> Encode.maybe |> Encode.list), Argument.optional "repositoryId" filledInOptionals____.repositoryId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "packageType" filledInOptionals____.packageType (Encode.enum Api.Enum.PackageType.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodePackageOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "packages" optionalArgs____ object____ Basics.identity


{-| The repository parent, if this is a fork.
-}
parent :
    SelectionSet decodesTo Api.Object.Repository
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
parent object____ =
    Object.selectionForCompositeField "parent" [] object____ (Basics.identity >> Decode.nullable)


type alias PinnedDiscussionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of discussions that have been pinned in this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
pinnedDiscussions :
    (PinnedDiscussionsOptionalArguments -> PinnedDiscussionsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.PinnedDiscussionConnection
    -> SelectionSet decodesTo Api.Object.Repository
pinnedDiscussions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pinnedDiscussions" optionalArgs____ object____ Basics.identity


type alias PinnedIssuesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of pinned issues for this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
pinnedIssues :
    (PinnedIssuesOptionalArguments -> PinnedIssuesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.PinnedIssueConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
pinnedIssues fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pinnedIssues" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| The primary language of the repository's code.
-}
primaryLanguage :
    SelectionSet decodesTo Api.Object.Language
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
primaryLanguage object____ =
    Object.selectionForCompositeField "primaryLanguage" [] object____ (Basics.identity >> Decode.nullable)


type alias ProjectRequiredArguments =
    { number : Int }


{-| Find project by number.

  - number - The project number to find.

-}
project :
    ProjectRequiredArguments
    -> SelectionSet decodesTo Api.Object.Project
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
project requiredArgs____ object____ =
    Object.selectionForCompositeField "project" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectNextRequiredArguments =
    { number : Int }


{-| Finds and returns the Project (beta) according to the provided Project (beta) number.
@deprecated The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. Follow the ProjectV2 guide at <https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/>, to find a suitable replacement. Removal on 2023-01-01 UTC.

  - number - The ProjectNext number.

-}
projectNext :
    ProjectNextRequiredArguments
    -> SelectionSet decodesTo Api.Object.ProjectNext
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
projectNext requiredArgs____ object____ =
    Object.selectionForCompositeField "projectNext" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectV2RequiredArguments =
    { number : Int }


{-| Finds and returns the Project according to the provided Project number.

  - number - The Project number.

-}
projectV2 :
    ProjectV2RequiredArguments
    -> SelectionSet decodesTo Api.Object.ProjectV2
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
projectV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "projectV2" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectsOptionalArguments =
    { orderBy : OptionalArgument Api.InputObject.ProjectOrder
    , search : OptionalArgument String
    , states : OptionalArgument (List Api.Enum.ProjectState.ProjectState)
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of projects under the owner.

  - orderBy - Ordering options for projects returned from the connection
  - search - Query to search projects by, currently only searching by name.
  - states - A list of states to filter the projects by.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projects :
    (ProjectsOptionalArguments -> ProjectsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectConnection
    -> SelectionSet decodesTo Api.Object.Repository
projects fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { orderBy = Absent, search = Absent, states = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeProjectOrder, Argument.optional "search" filledInOptionals____.search Encode.string, Argument.optional "states" filledInOptionals____.states (Encode.enum Api.Enum.ProjectState.toString |> Encode.list), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projects" optionalArgs____ object____ Basics.identity


type alias ProjectsNextOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , query : OptionalArgument String
    , sortBy : OptionalArgument Api.Enum.ProjectNextOrderField.ProjectNextOrderField
    }


{-| List of projects (beta) linked to this repository.
@deprecated The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. Follow the ProjectV2 guide at <https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/>, to find a suitable replacement. Removal on 2023-01-01 UTC.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - query - A project (beta) to search for linked to the repo.
  - sortBy - How to order the returned project (beta) objects.

-}
projectsNext :
    (ProjectsNextOptionalArguments -> ProjectsNextOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectNextConnection
    -> SelectionSet decodesTo Api.Object.Repository
projectsNext fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, query = Absent, sortBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "sortBy" filledInOptionals____.sortBy (Encode.enum Api.Enum.ProjectNextOrderField.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectsNext" optionalArgs____ object____ Basics.identity


{-| The HTTP path listing the repository's projects
-}
projectsResourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Repository
projectsResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "projectsResourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL listing the repository's projects
-}
projectsUrl : SelectionSet Api.ScalarCodecs.Uri Api.Object.Repository
projectsUrl =
    Object.selectionForField "ScalarCodecs.Uri" "projectsUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias ProjectsV2OptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , query : OptionalArgument String
    , orderBy : OptionalArgument Api.InputObject.ProjectV2Order
    }


{-| List of projects linked to this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - query - A project to search for linked to the repo.
  - orderBy - How to order the returned projects.

-}
projectsV2 :
    (ProjectsV2OptionalArguments -> ProjectsV2OptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectV2Connection
    -> SelectionSet decodesTo Api.Object.Repository
projectsV2 fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, query = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeProjectV2Order ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectsV2" optionalArgs____ object____ Basics.identity


type alias PullRequestRequiredArguments =
    { number : Int }


{-| Returns a single pull request from the current repository by number.

  - number - The number for the pull request to be returned.

-}
pullRequest :
    PullRequestRequiredArguments
    -> SelectionSet decodesTo Api.Object.PullRequest
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
pullRequest requiredArgs____ object____ =
    Object.selectionForCompositeField "pullRequest" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


{-| Returns a list of pull request templates associated to the repository
-}
pullRequestTemplates :
    SelectionSet decodesTo Api.Object.PullRequestTemplate
    -> SelectionSet (Maybe (List decodesTo)) Api.Object.Repository
pullRequestTemplates object____ =
    Object.selectionForCompositeField "pullRequestTemplates" [] object____ (Basics.identity >> Decode.list >> Decode.nullable)


type alias PullRequestsOptionalArguments =
    { states : OptionalArgument (List Api.Enum.PullRequestState.PullRequestState)
    , labels : OptionalArgument (List String)
    , headRefName : OptionalArgument String
    , baseRefName : OptionalArgument String
    , orderBy : OptionalArgument Api.InputObject.IssueOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of pull requests that have been opened in the repository.

  - states - A list of states to filter the pull requests by.
  - labels - A list of label names to filter the pull requests by.
  - headRefName - The head ref name to filter the pull requests by.
  - baseRefName - The base ref name to filter the pull requests by.
  - orderBy - Ordering options for pull requests returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
pullRequests :
    (PullRequestsOptionalArguments -> PullRequestsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.PullRequestConnection
    -> SelectionSet decodesTo Api.Object.Repository
pullRequests fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { states = Absent, labels = Absent, headRefName = Absent, baseRefName = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "states" filledInOptionals____.states (Encode.enum Api.Enum.PullRequestState.toString |> Encode.list), Argument.optional "labels" filledInOptionals____.labels (Encode.string |> Encode.list), Argument.optional "headRefName" filledInOptionals____.headRefName Encode.string, Argument.optional "baseRefName" filledInOptionals____.baseRefName Encode.string, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeIssueOrder, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pullRequests" optionalArgs____ object____ Basics.identity


{-| Identifies when the repository was last pushed to.
-}
pushedAt : SelectionSet (Maybe Api.ScalarCodecs.DateTime) Api.Object.Repository
pushedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "pushedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| Whether or not rebase-merging is enabled on this repository.
-}
rebaseMergeAllowed : SelectionSet Bool Api.Object.Repository
rebaseMergeAllowed =
    Object.selectionForField "Bool" "rebaseMergeAllowed" [] Decode.bool


type alias RecentProjectsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Recent projects that this user has modified in the context of the owner.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
recentProjects :
    (RecentProjectsOptionalArguments -> RecentProjectsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ProjectV2Connection
    -> SelectionSet decodesTo Api.Object.Repository
recentProjects fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "recentProjects" optionalArgs____ object____ Basics.identity


type alias RefRequiredArguments =
    { qualifiedName : String }


{-| Fetch a given ref from the repository

  - qualifiedName - The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`).

-}
ref :
    RefRequiredArguments
    -> SelectionSet decodesTo Api.Object.Ref
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
ref requiredArgs____ object____ =
    Object.selectionForCompositeField "ref" [ Argument.required "qualifiedName" requiredArgs____.qualifiedName Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias RefsOptionalArguments =
    { query : OptionalArgument String
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , direction : OptionalArgument Api.Enum.OrderDirection.OrderDirection
    , orderBy : OptionalArgument Api.InputObject.RefOrder
    }


type alias RefsRequiredArguments =
    { refPrefix : String }


{-| Fetch a list of refs from the repository

  - query - Filters refs with query on name
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - refPrefix - A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
  - direction - DEPRECATED: use orderBy. The ordering direction.
  - orderBy - Ordering options for refs returned from the connection.

-}
refs :
    (RefsOptionalArguments -> RefsOptionalArguments)
    -> RefsRequiredArguments
    -> SelectionSet decodesTo Api.Object.RefConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
refs fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { query = Absent, after = Absent, before = Absent, first = Absent, last = Absent, direction = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "direction" filledInOptionals____.direction (Encode.enum Api.Enum.OrderDirection.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeRefOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "refs" (optionalArgs____ ++ [ Argument.required "refPrefix" requiredArgs____.refPrefix Encode.string ]) object____ (Basics.identity >> Decode.nullable)


type alias ReleaseRequiredArguments =
    { tagName : String }


{-| Lookup a single release given various criteria.

  - tagName - The name of the Tag the Release was created from

-}
release :
    ReleaseRequiredArguments
    -> SelectionSet decodesTo Api.Object.Release
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
release requiredArgs____ object____ =
    Object.selectionForCompositeField "release" [ Argument.required "tagName" requiredArgs____.tagName Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias ReleasesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.ReleaseOrder
    }


{-| List of releases which are dependent on this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Order for connection

-}
releases :
    (ReleasesOptionalArguments -> ReleasesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ReleaseConnection
    -> SelectionSet decodesTo Api.Object.Repository
releases fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeReleaseOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "releases" optionalArgs____ object____ Basics.identity


type alias RepositoryTopicsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of applied repository-topic associations for this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
repositoryTopics :
    (RepositoryTopicsOptionalArguments -> RepositoryTopicsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.RepositoryTopicConnection
    -> SelectionSet decodesTo Api.Object.Repository
repositoryTopics fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "repositoryTopics" optionalArgs____ object____ Basics.identity


{-| The HTTP path for this repository
-}
resourcePath : SelectionSet Api.ScalarCodecs.Uri Api.Object.Repository
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The security policy URL.
-}
securityPolicyUrl : SelectionSet (Maybe Api.ScalarCodecs.Uri) Api.Object.Repository
securityPolicyUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "securityPolicyUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


type alias ShortDescriptionHTMLOptionalArguments =
    { limit : OptionalArgument Int }


{-| A description of the repository, rendered to HTML without any links in it.

  - limit - How many characters to return.

-}
shortDescriptionHTML :
    (ShortDescriptionHTMLOptionalArguments -> ShortDescriptionHTMLOptionalArguments)
    -> SelectionSet Api.ScalarCodecs.Html Api.Object.Repository
shortDescriptionHTML fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "ScalarCodecs.Html" "shortDescriptionHTML" optionalArgs____ (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| Whether or not squash-merging is enabled on this repository.
-}
squashMergeAllowed : SelectionSet Bool Api.Object.Repository
squashMergeAllowed =
    Object.selectionForField "Bool" "squashMergeAllowed" [] Decode.bool


{-| How the default commit message will be generated when squash merging a pull request.
-}
squashMergeCommitMessage : SelectionSet Api.Enum.SquashMergeCommitMessage.SquashMergeCommitMessage Api.Object.Repository
squashMergeCommitMessage =
    Object.selectionForField "Enum.SquashMergeCommitMessage.SquashMergeCommitMessage" "squashMergeCommitMessage" [] Api.Enum.SquashMergeCommitMessage.decoder


{-| How the default commit title will be generated when squash merging a pull request.
-}
squashMergeCommitTitle : SelectionSet Api.Enum.SquashMergeCommitTitle.SquashMergeCommitTitle Api.Object.Repository
squashMergeCommitTitle =
    Object.selectionForField "Enum.SquashMergeCommitTitle.SquashMergeCommitTitle" "squashMergeCommitTitle" [] Api.Enum.SquashMergeCommitTitle.decoder


{-| Whether a squash merge commit can use the pull request title as default.
-}
squashPrTitleUsedAsDefault : SelectionSet Bool Api.Object.Repository
squashPrTitleUsedAsDefault =
    Object.selectionForField "Bool" "squashPrTitleUsedAsDefault" [] Decode.bool


{-| The SSH URL to clone this repository
-}
sshUrl : SelectionSet Api.ScalarCodecs.GitSSHRemote Api.Object.Repository
sshUrl =
    Object.selectionForField "ScalarCodecs.GitSSHRemote" "sshUrl" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecGitSSHRemote |> .decoder)


{-| Returns a count of how many stargazers there are on this object
-}
stargazerCount : SelectionSet Int Api.Object.Repository
stargazerCount =
    Object.selectionForField "Int" "stargazerCount" [] Decode.int


type alias StargazersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Api.InputObject.StarOrder
    }


{-| A list of users who have starred this starrable.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Order for connection

-}
stargazers :
    (StargazersOptionalArguments -> StargazersOptionalArguments)
    -> SelectionSet decodesTo Api.Object.StargazerConnection
    -> SelectionSet decodesTo Api.Object.Repository
stargazers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Api.InputObject.encodeStarOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "stargazers" optionalArgs____ object____ Basics.identity


type alias SubmodulesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
submodules :
    (SubmodulesOptionalArguments -> SubmodulesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.SubmoduleConnection
    -> SelectionSet decodesTo Api.Object.Repository
submodules fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "submodules" optionalArgs____ object____ Basics.identity


{-| Temporary authentication token for cloning this repository.
-}
tempCloneToken : SelectionSet (Maybe String) Api.Object.Repository
tempCloneToken =
    Object.selectionForField "(Maybe String)" "tempCloneToken" [] (Decode.string |> Decode.nullable)


{-| The repository from which this repository was generated, if any.
-}
templateRepository :
    SelectionSet decodesTo Api.Object.Repository
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
templateRepository object____ =
    Object.selectionForCompositeField "templateRepository" [] object____ (Basics.identity >> Decode.nullable)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Repository
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this repository
-}
url : SelectionSet String Api.Object.Repository
url =
    Object.selectionForField "String" "url" [] Decode.string


{-| Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
-}
usesCustomOpenGraphImage : SelectionSet Bool Api.Object.Repository
usesCustomOpenGraphImage =
    Object.selectionForField "Bool" "usesCustomOpenGraphImage" [] Decode.bool


{-| Indicates whether the viewer has admin permissions on this repository.
-}
viewerCanAdminister : SelectionSet Bool Api.Object.Repository
viewerCanAdminister =
    Object.selectionForField "Bool" "viewerCanAdminister" [] Decode.bool


{-| Can the current viewer create new projects on this owner.
-}
viewerCanCreateProjects : SelectionSet Bool Api.Object.Repository
viewerCanCreateProjects =
    Object.selectionForField "Bool" "viewerCanCreateProjects" [] Decode.bool


{-| Check if the viewer is able to change their subscription status for the repository.
-}
viewerCanSubscribe : SelectionSet Bool Api.Object.Repository
viewerCanSubscribe =
    Object.selectionForField "Bool" "viewerCanSubscribe" [] Decode.bool


{-| Indicates whether the viewer can update the topics of this repository.
-}
viewerCanUpdateTopics : SelectionSet Bool Api.Object.Repository
viewerCanUpdateTopics =
    Object.selectionForField "Bool" "viewerCanUpdateTopics" [] Decode.bool


{-| The last commit email for the viewer.
-}
viewerDefaultCommitEmail : SelectionSet (Maybe String) Api.Object.Repository
viewerDefaultCommitEmail =
    Object.selectionForField "(Maybe String)" "viewerDefaultCommitEmail" [] (Decode.string |> Decode.nullable)


{-| The last used merge method by the viewer or the default for the repository.
-}
viewerDefaultMergeMethod : SelectionSet Api.Enum.PullRequestMergeMethod.PullRequestMergeMethod Api.Object.Repository
viewerDefaultMergeMethod =
    Object.selectionForField "Enum.PullRequestMergeMethod.PullRequestMergeMethod" "viewerDefaultMergeMethod" [] Api.Enum.PullRequestMergeMethod.decoder


{-| Returns a boolean indicating whether the viewing user has starred this starrable.
-}
viewerHasStarred : SelectionSet Bool Api.Object.Repository
viewerHasStarred =
    Object.selectionForField "Bool" "viewerHasStarred" [] Decode.bool


{-| The users permission level on the repository. Will return null if authenticated as an GitHub App.
-}
viewerPermission : SelectionSet (Maybe Api.Enum.RepositoryPermission.RepositoryPermission) Api.Object.Repository
viewerPermission =
    Object.selectionForField "(Maybe Enum.RepositoryPermission.RepositoryPermission)" "viewerPermission" [] (Api.Enum.RepositoryPermission.decoder |> Decode.nullable)


{-| A list of emails this viewer can commit with.
-}
viewerPossibleCommitEmails : SelectionSet (Maybe (List String)) Api.Object.Repository
viewerPossibleCommitEmails =
    Object.selectionForField "(Maybe (List String))" "viewerPossibleCommitEmails" [] (Decode.string |> Decode.list |> Decode.nullable)


{-| Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-}
viewerSubscription : SelectionSet (Maybe Api.Enum.SubscriptionState.SubscriptionState) Api.Object.Repository
viewerSubscription =
    Object.selectionForField "(Maybe Enum.SubscriptionState.SubscriptionState)" "viewerSubscription" [] (Api.Enum.SubscriptionState.decoder |> Decode.nullable)


{-| Indicates the repository's visibility level.
-}
visibility : SelectionSet Api.Enum.RepositoryVisibility.RepositoryVisibility Api.Object.Repository
visibility =
    Object.selectionForField "Enum.RepositoryVisibility.RepositoryVisibility" "visibility" [] Api.Enum.RepositoryVisibility.decoder


type alias VulnerabilityAlertsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , states : OptionalArgument (List Api.Enum.RepositoryVulnerabilityAlertState.RepositoryVulnerabilityAlertState)
    , dependencyScopes : OptionalArgument (List Api.Enum.RepositoryVulnerabilityAlertDependencyScope.RepositoryVulnerabilityAlertDependencyScope)
    }


{-| A list of vulnerability alerts that are on this repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - states - Filter by the state of the alert
  - dependencyScopes - Filter by the scope of the alert's dependency

-}
vulnerabilityAlerts :
    (VulnerabilityAlertsOptionalArguments -> VulnerabilityAlertsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.RepositoryVulnerabilityAlertConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Repository
vulnerabilityAlerts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, states = Absent, dependencyScopes = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "states" filledInOptionals____.states (Encode.enum Api.Enum.RepositoryVulnerabilityAlertState.toString |> Encode.list), Argument.optional "dependencyScopes" filledInOptionals____.dependencyScopes (Encode.enum Api.Enum.RepositoryVulnerabilityAlertDependencyScope.toString |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "vulnerabilityAlerts" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias WatchersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users watching the repository.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
watchers :
    (WatchersOptionalArguments -> WatchersOptionalArguments)
    -> SelectionSet decodesTo Api.Object.UserConnection
    -> SelectionSet decodesTo Api.Object.Repository
watchers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "watchers" optionalArgs____ object____ Basics.identity


{-| Whether contributors are required to sign off on web-based commits in this repository.
-}
webCommitSignoffRequired : SelectionSet Bool Api.Object.Repository
webCommitSignoffRequired =
    Object.selectionForField "Bool" "webCommitSignoffRequired" [] Decode.bool
